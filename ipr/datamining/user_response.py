# Generated by https://quicktype.io
# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = user_response_from_dict(json.loads(json_string))

from dataclasses import dataclass
from typing import Optional, Any, List, Dict, TypeVar, Type, Callable, cast
from enum import Enum
from uuid import UUID


T = TypeVar("T")
EnumT = TypeVar("EnumT", bound=Enum)


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def from_bool(x: Any) -> bool:
    assert isinstance(x, bool)
    return x


def to_enum(c: Type[EnumT], x: Any) -> EnumT:
    assert isinstance(x, c)
    return x.value


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


def from_dict(f: Callable[[Any], T], x: Any) -> Dict[str, T]:
    assert isinstance(x, dict)
    return { k: f(v) for (k, v) in x.items() }


@dataclass
class Accessory:
    accessory_id: Optional[str] = None
    amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Accessory':
        assert isinstance(obj, dict)
        accessory_id = from_union([from_str, from_none], obj.get("accessoryId"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        return Accessory(accessory_id, amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["accessoryId"] = from_union([from_str, from_none], self.accessory_id)
        result["amount"] = from_union([from_int, from_none], self.amount)
        return result


@dataclass
class Area:
    area_id: Optional[str] = None
    clear_quest_count: Optional[int] = None
    daily_clear_count: Optional[int] = None
    last_cleared_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Area':
        assert isinstance(obj, dict)
        area_id = from_union([from_str, from_none], obj.get("areaId"))
        clear_quest_count = from_union([from_int, from_none], obj.get("clearQuestCount"))
        daily_clear_count = from_union([from_int, from_none], obj.get("dailyClearCount"))
        last_cleared_time = from_union([from_int, from_none], obj.get("lastClearedTime"))
        return Area(area_id, clear_quest_count, daily_clear_count, last_cleared_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["areaId"] = from_union([from_str, from_none], self.area_id)
        result["clearQuestCount"] = from_union([from_int, from_none], self.clear_quest_count)
        result["dailyClearCount"] = from_union([from_int, from_none], self.daily_clear_count)
        result["lastClearedTime"] = from_union([from_int, from_none], self.last_cleared_time)
        return result


@dataclass
class Balance:
    free_balance: Optional[int] = None
    paid_balance: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Balance':
        assert isinstance(obj, dict)
        free_balance = from_union([from_int, from_none], obj.get("freeBalance"))
        paid_balance = from_union([from_int, from_none], obj.get("paidBalance"))
        return Balance(free_balance, paid_balance)

    def to_dict(self) -> dict:
        result: dict = {}
        result["freeBalance"] = from_union([from_int, from_none], self.free_balance)
        result["paidBalance"] = from_union([from_int, from_none], self.paid_balance)
        return result


@dataclass
class CardSupport:
    number: Optional[int] = None
    card_id: Optional[str] = None
    removable_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CardSupport':
        assert isinstance(obj, dict)
        number = from_union([from_int, from_none], obj.get("number"))
        card_id = from_union([from_str, from_none], obj.get("cardId"))
        removable_time = from_union([from_int, from_none], obj.get("removableTime"))
        return CardSupport(number, card_id, removable_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["number"] = from_union([from_int, from_none], self.number)
        result["cardId"] = from_union([from_str, from_none], self.card_id)
        result["removableTime"] = from_union([from_int, from_none], self.removable_time)
        return result


@dataclass
class Card:
    card_id: Optional[str] = None
    total_exp: Optional[int] = None
    rarity_total_exp: Optional[int] = None
    skill_level1: Optional[int] = None
    skill_level2: Optional[int] = None
    skill_level3: Optional[int] = None
    live_ability_level: Optional[int] = None
    activity_ability_level: Optional[int] = None
    obtained_time: Optional[int] = None
    supported: Optional[bool] = None
    last_enhance_time: Optional[int] = None
    level: Optional[int] = None
    rarity: Optional[int] = None
    vocal: Optional[int] = None
    dance: Optional[int] = None
    visual: Optional[int] = None
    stamina: Optional[int] = None
    mental: Optional[int] = None
    technique: Optional[int] = None
    skill_id1: Optional[str] = None
    skill_id2: Optional[str] = None
    skill_id3: Optional[str] = None
    live_ability_id: Optional[str] = None
    activity_ability_id: Optional[str] = None
    photo_equipable_count: Optional[int] = None
    base_level: Optional[int] = None
    base_vocal: Optional[int] = None
    base_dance: Optional[int] = None
    base_visual: Optional[int] = None
    base_stamina: Optional[int] = None
    base_skill_level1: Optional[int] = None
    base_skill_level2: Optional[int] = None
    base_skill_level3: Optional[int] = None
    base_live_ability_level: Optional[int] = None
    base_activity_ability_level: Optional[int] = None
    base_skill_id1: Optional[str] = None
    base_skill_id2: Optional[str] = None
    base_skill_id3: Optional[str] = None
    base_live_ability_id: Optional[str] = None
    base_activity_ability_id: Optional[str] = None
    base_photo_equipable_count: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Card':
        assert isinstance(obj, dict)
        card_id = from_union([from_str, from_none], obj.get("cardId"))
        total_exp = from_union([from_int, from_none], obj.get("totalExp"))
        rarity_total_exp = from_union([from_int, from_none], obj.get("rarityTotalExp"))
        skill_level1 = from_union([from_int, from_none], obj.get("skillLevel1"))
        skill_level2 = from_union([from_int, from_none], obj.get("skillLevel2"))
        skill_level3 = from_union([from_int, from_none], obj.get("skillLevel3"))
        live_ability_level = from_union([from_int, from_none], obj.get("liveAbilityLevel"))
        activity_ability_level = from_union([from_int, from_none], obj.get("activityAbilityLevel"))
        obtained_time = from_union([from_int, from_none], obj.get("obtainedTime"))
        supported = from_union([from_bool, from_none], obj.get("supported"))
        last_enhance_time = from_union([from_int, from_none], obj.get("lastEnhanceTime"))
        level = from_union([from_int, from_none], obj.get("level"))
        rarity = from_union([from_int, from_none], obj.get("rarity"))
        vocal = from_union([from_int, from_none], obj.get("vocal"))
        dance = from_union([from_int, from_none], obj.get("dance"))
        visual = from_union([from_int, from_none], obj.get("visual"))
        stamina = from_union([from_int, from_none], obj.get("stamina"))
        mental = from_union([from_int, from_none], obj.get("mental"))
        technique = from_union([from_int, from_none], obj.get("technique"))
        skill_id1 = from_union([from_str, from_none], obj.get("skillId1"))
        skill_id2 = from_union([from_none, from_str], obj.get("skillId2"))
        skill_id3 = from_union([from_none, from_str], obj.get("skillId3"))
        live_ability_id = from_union([from_none, from_str], obj.get("liveAbilityId"))
        activity_ability_id = from_union([from_none, from_str], obj.get("activityAbilityId"))
        photo_equipable_count = from_union([from_int, from_none], obj.get("photoEquipableCount"))
        base_level = from_union([from_int, from_none], obj.get("baseLevel"))
        base_vocal = from_union([from_int, from_none], obj.get("baseVocal"))
        base_dance = from_union([from_int, from_none], obj.get("baseDance"))
        base_visual = from_union([from_int, from_none], obj.get("baseVisual"))
        base_stamina = from_union([from_int, from_none], obj.get("baseStamina"))
        base_skill_level1 = from_union([from_int, from_none], obj.get("baseSkillLevel1"))
        base_skill_level2 = from_union([from_int, from_none], obj.get("baseSkillLevel2"))
        base_skill_level3 = from_union([from_int, from_none], obj.get("baseSkillLevel3"))
        base_live_ability_level = from_union([from_int, from_none], obj.get("baseLiveAbilityLevel"))
        base_activity_ability_level = from_union([from_int, from_none], obj.get("baseActivityAbilityLevel"))
        base_skill_id1 = from_union([from_str, from_none], obj.get("baseSkillId1"))
        base_skill_id2 = from_union([from_none, from_str], obj.get("baseSkillId2"))
        base_skill_id3 = from_union([from_none, from_str], obj.get("baseSkillId3"))
        base_live_ability_id = from_union([from_none, from_str], obj.get("baseLiveAbilityId"))
        base_activity_ability_id = from_union([from_none, from_str], obj.get("baseActivityAbilityId"))
        base_photo_equipable_count = from_union([from_int, from_none], obj.get("basePhotoEquipableCount"))
        return Card(card_id, total_exp, rarity_total_exp, skill_level1, skill_level2, skill_level3, live_ability_level, activity_ability_level, obtained_time, supported, last_enhance_time, level, rarity, vocal, dance, visual, stamina, mental, technique, skill_id1, skill_id2, skill_id3, live_ability_id, activity_ability_id, photo_equipable_count, base_level, base_vocal, base_dance, base_visual, base_stamina, base_skill_level1, base_skill_level2, base_skill_level3, base_live_ability_level, base_activity_ability_level, base_skill_id1, base_skill_id2, base_skill_id3, base_live_ability_id, base_activity_ability_id, base_photo_equipable_count)

    def to_dict(self) -> dict:
        result: dict = {}
        result["cardId"] = from_union([from_str, from_none], self.card_id)
        result["totalExp"] = from_union([from_int, from_none], self.total_exp)
        result["rarityTotalExp"] = from_union([from_int, from_none], self.rarity_total_exp)
        result["skillLevel1"] = from_union([from_int, from_none], self.skill_level1)
        result["skillLevel2"] = from_union([from_int, from_none], self.skill_level2)
        result["skillLevel3"] = from_union([from_int, from_none], self.skill_level3)
        result["liveAbilityLevel"] = from_union([from_int, from_none], self.live_ability_level)
        result["activityAbilityLevel"] = from_union([from_int, from_none], self.activity_ability_level)
        result["obtainedTime"] = from_union([from_int, from_none], self.obtained_time)
        result["supported"] = from_union([from_bool, from_none], self.supported)
        result["lastEnhanceTime"] = from_union([from_int, from_none], self.last_enhance_time)
        result["level"] = from_union([from_int, from_none], self.level)
        result["rarity"] = from_union([from_int, from_none], self.rarity)
        result["vocal"] = from_union([from_int, from_none], self.vocal)
        result["dance"] = from_union([from_int, from_none], self.dance)
        result["visual"] = from_union([from_int, from_none], self.visual)
        result["stamina"] = from_union([from_int, from_none], self.stamina)
        result["mental"] = from_union([from_int, from_none], self.mental)
        result["technique"] = from_union([from_int, from_none], self.technique)
        result["skillId1"] = from_union([from_str, from_none], self.skill_id1)
        result["skillId2"] = from_union([from_none, from_str], self.skill_id2)
        result["skillId3"] = from_union([from_none, from_str], self.skill_id3)
        result["liveAbilityId"] = from_union([from_none, from_str], self.live_ability_id)
        result["activityAbilityId"] = from_union([from_none, from_str], self.activity_ability_id)
        result["photoEquipableCount"] = from_union([from_int, from_none], self.photo_equipable_count)
        result["baseLevel"] = from_union([from_int, from_none], self.base_level)
        result["baseVocal"] = from_union([from_int, from_none], self.base_vocal)
        result["baseDance"] = from_union([from_int, from_none], self.base_dance)
        result["baseVisual"] = from_union([from_int, from_none], self.base_visual)
        result["baseStamina"] = from_union([from_int, from_none], self.base_stamina)
        result["baseSkillLevel1"] = from_union([from_int, from_none], self.base_skill_level1)
        result["baseSkillLevel2"] = from_union([from_int, from_none], self.base_skill_level2)
        result["baseSkillLevel3"] = from_union([from_int, from_none], self.base_skill_level3)
        result["baseLiveAbilityLevel"] = from_union([from_int, from_none], self.base_live_ability_level)
        result["baseActivityAbilityLevel"] = from_union([from_int, from_none], self.base_activity_ability_level)
        result["baseSkillId1"] = from_union([from_str, from_none], self.base_skill_id1)
        result["baseSkillId2"] = from_union([from_none, from_str], self.base_skill_id2)
        result["baseSkillId3"] = from_union([from_none, from_str], self.base_skill_id3)
        result["baseLiveAbilityId"] = from_union([from_none, from_str], self.base_live_ability_id)
        result["baseActivityAbilityId"] = from_union([from_none, from_str], self.base_activity_ability_id)
        result["basePhotoEquipableCount"] = from_union([from_int, from_none], self.base_photo_equipable_count)
        return result


class CharacterID(Enum):
    CHAR_AI = "char-ai"
    CHAR_AOI = "char-aoi"
    CHAR_CHS = "char-chs"
    CHAR_HRK = "char-hrk"
    CHAR_KKR = "char-kkr"
    CHAR_KTN = "char-ktn"
    CHAR_MEI = "char-mei"
    CHAR_MNA = "char-mna"
    CHAR_NGS = "char-ngs"
    CHAR_REI = "char-rei"
    CHAR_RIO = "char-rio"
    CHAR_RUI = "char-rui"
    CHAR_SKI = "char-ski"
    CHAR_SKR = "char-skr"
    CHAR_SMR = "char-smr"
    CHAR_SUZ = "char-suz"
    CHAR_SZK = "char-szk"
    CHAR_YU = "char-yu"


@dataclass
class CharacterMusic:
    character_id: Optional[CharacterID] = None
    music_id: Optional[str] = None
    mastery_point: Optional[int] = None
    mastery_level: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CharacterMusic':
        assert isinstance(obj, dict)
        character_id = from_union([CharacterID, from_none], obj.get("characterId"))
        music_id = from_union([from_str, from_none], obj.get("musicId"))
        mastery_point = from_union([from_int, from_none], obj.get("masteryPoint"))
        mastery_level = from_union([from_int, from_none], obj.get("masteryLevel"))
        return CharacterMusic(character_id, music_id, mastery_point, mastery_level)

    def to_dict(self) -> dict:
        result: dict = {}
        result["characterId"] = from_union([lambda x: to_enum(CharacterID, x), from_none], self.character_id)
        result["musicId"] = from_union([from_str, from_none], self.music_id)
        result["masteryPoint"] = from_union([from_int, from_none], self.mastery_point)
        result["masteryLevel"] = from_union([from_int, from_none], self.mastery_level)
        return result


@dataclass
class Character:
    character_id: Optional[CharacterID] = None
    activity_exp: Optional[int] = None
    activity_stamina: Optional[int] = None
    light_fan_amount: Optional[int] = None
    middle_fan_amount: Optional[int] = None
    heavy_fan_amount: Optional[int] = None
    favorite_costume_id: Optional[str] = None
    stamina_updated_time: Optional[int] = None
    in_activity: Optional[bool] = None
    reliability: Optional[int] = None
    live_highest_score: Optional[int] = None
    character_only_photo_amount: Optional[int] = None
    live_costume_id: Optional[str] = None
    activity_level: Optional[int] = None
    audience_candidate_amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Character':
        assert isinstance(obj, dict)
        character_id = from_union([CharacterID, from_none], obj.get("characterId"))
        activity_exp = from_union([from_int, from_none], obj.get("activityExp"))
        activity_stamina = from_union([from_int, from_none], obj.get("activityStamina"))
        light_fan_amount = from_union([from_int, from_none], obj.get("lightFanAmount"))
        middle_fan_amount = from_union([from_int, from_none], obj.get("middleFanAmount"))
        heavy_fan_amount = from_union([from_int, from_none], obj.get("heavyFanAmount"))
        favorite_costume_id = from_union([from_str, from_none], obj.get("favoriteCostumeId"))
        stamina_updated_time = from_union([from_int, from_none], obj.get("staminaUpdatedTime"))
        in_activity = from_union([from_bool, from_none], obj.get("inActivity"))
        reliability = from_union([from_int, from_none], obj.get("reliability"))
        live_highest_score = from_union([from_int, from_none], obj.get("liveHighestScore"))
        character_only_photo_amount = from_union([from_int, from_none], obj.get("characterOnlyPhotoAmount"))
        live_costume_id = from_union([from_str, from_none], obj.get("liveCostumeId"))
        activity_level = from_union([from_int, from_none], obj.get("activityLevel"))
        audience_candidate_amount = from_union([from_int, from_none], obj.get("audienceCandidateAmount"))
        return Character(character_id, activity_exp, activity_stamina, light_fan_amount, middle_fan_amount, heavy_fan_amount, favorite_costume_id, stamina_updated_time, in_activity, reliability, live_highest_score, character_only_photo_amount, live_costume_id, activity_level, audience_candidate_amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["characterId"] = from_union([lambda x: to_enum(CharacterID, x), from_none], self.character_id)
        result["activityExp"] = from_union([from_int, from_none], self.activity_exp)
        result["activityStamina"] = from_union([from_int, from_none], self.activity_stamina)
        result["lightFanAmount"] = from_union([from_int, from_none], self.light_fan_amount)
        result["middleFanAmount"] = from_union([from_int, from_none], self.middle_fan_amount)
        result["heavyFanAmount"] = from_union([from_int, from_none], self.heavy_fan_amount)
        result["favoriteCostumeId"] = from_union([from_str, from_none], self.favorite_costume_id)
        result["staminaUpdatedTime"] = from_union([from_int, from_none], self.stamina_updated_time)
        result["inActivity"] = from_union([from_bool, from_none], self.in_activity)
        result["reliability"] = from_union([from_int, from_none], self.reliability)
        result["liveHighestScore"] = from_union([from_int, from_none], self.live_highest_score)
        result["characterOnlyPhotoAmount"] = from_union([from_int, from_none], self.character_only_photo_amount)
        result["liveCostumeId"] = from_union([from_str, from_none], self.live_costume_id)
        result["activityLevel"] = from_union([from_int, from_none], self.activity_level)
        result["audienceCandidateAmount"] = from_union([from_int, from_none], self.audience_candidate_amount)
        return result


@dataclass
class Costume:
    costume_id: Optional[str] = None
    checked: Optional[bool] = None
    obtained_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Costume':
        assert isinstance(obj, dict)
        costume_id = from_union([from_str, from_none], obj.get("costumeId"))
        checked = from_union([from_bool, from_none], obj.get("checked_"))
        obtained_time = from_union([from_int, from_none], obj.get("obtainedTime"))
        return Costume(costume_id, checked, obtained_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["costumeId"] = from_union([from_str, from_none], self.costume_id)
        result["checked_"] = from_union([from_bool, from_none], self.checked)
        result["obtainedTime"] = from_union([from_int, from_none], self.obtained_time)
        return result


class Part1AccessoryID(Enum):
    AC_1_DANCE_18 = "ac-1-dance-18"
    AC_1_DANCE_19 = "ac-1-dance-19"
    AC_1_VISUAL_16 = "ac-1-visual-16"
    AC_1_VISUAL_18 = "ac-1-visual-18"
    AC_1_VISUAL_19 = "ac-1-visual-19"
    AC_1_VOCAL_18 = "ac-1-vocal-18"
    AC_1_VOCAL_19 = "ac-1-vocal-19"


class Part2AccessoryID(Enum):
    AC_2_MENTAL_17 = "ac-2-mental-17"
    AC_2_MENTAL_18 = "ac-2-mental-18"
    AC_2_TECHNIQUE_17 = "ac-2-technique-17"
    AC_2_TECHNIQUE_18 = "ac-2-technique-18"


@dataclass
class DeckPosition:
    costume_id: None
    position: Optional[int] = None
    card_id: Optional[str] = None
    part1_accessory_id: Optional[Part1AccessoryID] = None
    part2_accessory_id: Optional[Part2AccessoryID] = None
    photo_ids: Optional[List[UUID]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'DeckPosition':
        assert isinstance(obj, dict)
        costume_id = from_none(obj.get("costumeId"))
        position = from_union([from_int, from_none], obj.get("position"))
        card_id = from_union([from_str, from_none], obj.get("cardId"))
        part1_accessory_id = from_union([Part1AccessoryID, from_none], obj.get("part1AccessoryId"))
        part2_accessory_id = from_union([Part2AccessoryID, from_none], obj.get("part2AccessoryId"))
        photo_ids = from_union([lambda x: from_list(lambda x: UUID(x), x), from_none], obj.get("photoIds"))
        return DeckPosition(costume_id, position, card_id, part1_accessory_id, part2_accessory_id, photo_ids)

    def to_dict(self) -> dict:
        result: dict = {}
        result["costumeId"] = from_none(self.costume_id)
        result["position"] = from_union([from_int, from_none], self.position)
        result["cardId"] = from_union([from_str, from_none], self.card_id)
        result["part1AccessoryId"] = from_union([lambda x: to_enum(Part1AccessoryID, x), from_none], self.part1_accessory_id)
        result["part2AccessoryId"] = from_union([lambda x: to_enum(Part2AccessoryID, x), from_none], self.part2_accessory_id)
        result["photoIds"] = from_union([lambda x: from_list(lambda x: str(x), x), from_none], self.photo_ids)
        return result


@dataclass
class Deck:
    number: Optional[int] = None
    name: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Deck':
        assert isinstance(obj, dict)
        number = from_union([from_int, from_none], obj.get("number"))
        name = from_union([from_str, from_none], obj.get("name"))
        return Deck(number, name)

    def to_dict(self) -> dict:
        result: dict = {}
        result["number"] = from_union([from_int, from_none], self.number)
        result["name"] = from_union([from_str, from_none], self.name)
        return result


@dataclass
class Decoration:
    decoration_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Decoration':
        assert isinstance(obj, dict)
        decoration_id = from_union([from_str, from_none], obj.get("decorationId"))
        return Decoration(decoration_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["decorationId"] = from_union([from_str, from_none], self.decoration_id)
        return result


@dataclass
class Emblem:
    emblem_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Emblem':
        assert isinstance(obj, dict)
        emblem_id = from_union([from_str, from_none], obj.get("emblemId"))
        return Emblem(emblem_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["emblemId"] = from_union([from_str, from_none], self.emblem_id)
        return result


@dataclass
class GachaButton:
    gacha_button_id: Optional[str] = None
    draw_time: Optional[int] = None
    today_count: Optional[int] = None
    total_count: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'GachaButton':
        assert isinstance(obj, dict)
        gacha_button_id = from_union([from_str, from_none], obj.get("gachaButtonId"))
        draw_time = from_union([from_int, from_none], obj.get("drawTime"))
        today_count = from_union([from_int, from_none], obj.get("todayCount"))
        total_count = from_union([from_int, from_none], obj.get("totalCount"))
        return GachaButton(gacha_button_id, draw_time, today_count, total_count)

    def to_dict(self) -> dict:
        result: dict = {}
        result["gachaButtonId"] = from_union([from_str, from_none], self.gacha_button_id)
        result["drawTime"] = from_union([from_int, from_none], self.draw_time)
        result["todayCount"] = from_union([from_int, from_none], self.today_count)
        result["totalCount"] = from_union([from_int, from_none], self.total_count)
        return result


@dataclass
class Hierarchy:
    best_detail_grade_id: Optional[str] = None
    current_fixed_point: Optional[int] = None
    current_variable_point: Optional[int] = None
    best_total_point: Optional[int] = None
    current_point_update_datetime: Optional[int] = None
    received_reward_ids: Optional[List[str]] = None
    received_division_reward_ids: Optional[List[str]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Hierarchy':
        assert isinstance(obj, dict)
        best_detail_grade_id = from_union([from_str, from_none], obj.get("bestDetailGradeId"))
        current_fixed_point = from_union([from_int, from_none], obj.get("currentFixedPoint"))
        current_variable_point = from_union([from_int, from_none], obj.get("currentVariablePoint"))
        best_total_point = from_union([from_int, from_none], obj.get("bestTotalPoint"))
        current_point_update_datetime = from_union([from_int, from_none], obj.get("currentPointUpdateDatetime"))
        received_reward_ids = from_union([lambda x: from_list(from_str, x), from_none], obj.get("receivedRewardIds"))
        received_division_reward_ids = from_union([lambda x: from_list(from_str, x), from_none], obj.get("receivedDivisionRewardIds"))
        return Hierarchy(best_detail_grade_id, current_fixed_point, current_variable_point, best_total_point, current_point_update_datetime, received_reward_ids, received_division_reward_ids)

    def to_dict(self) -> dict:
        result: dict = {}
        result["bestDetailGradeId"] = from_union([from_str, from_none], self.best_detail_grade_id)
        result["currentFixedPoint"] = from_union([from_int, from_none], self.current_fixed_point)
        result["currentVariablePoint"] = from_union([from_int, from_none], self.current_variable_point)
        result["bestTotalPoint"] = from_union([from_int, from_none], self.best_total_point)
        result["currentPointUpdateDatetime"] = from_union([from_int, from_none], self.current_point_update_datetime)
        result["receivedRewardIds"] = from_union([lambda x: from_list(from_str, x), from_none], self.received_reward_ids)
        result["receivedDivisionRewardIds"] = from_union([lambda x: from_list(from_str, x), from_none], self.received_division_reward_ids)
        return result


@dataclass
class HomePosition:
    home_position_type: Optional[int] = None
    character_id: Optional[CharacterID] = None

    @staticmethod
    def from_dict(obj: Any) -> 'HomePosition':
        assert isinstance(obj, dict)
        home_position_type = from_union([from_int, from_none], obj.get("homePositionType"))
        character_id = from_union([CharacterID, from_none], obj.get("characterId"))
        return HomePosition(home_position_type, character_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["homePositionType"] = from_union([from_int, from_none], self.home_position_type)
        result["characterId"] = from_union([lambda x: to_enum(CharacterID, x), from_none], self.character_id)
        return result


@dataclass
class HomeTalk:
    home_talk_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'HomeTalk':
        assert isinstance(obj, dict)
        home_talk_id = from_union([from_str, from_none], obj.get("homeTalkId"))
        return HomeTalk(home_talk_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["homeTalkId"] = from_union([from_str, from_none], self.home_talk_id)
        return result


@dataclass
class Item:
    item_id: Optional[str] = None
    expired_time: Optional[int] = None
    amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Item':
        assert isinstance(obj, dict)
        item_id = from_union([from_str, from_none], obj.get("itemId"))
        expired_time = from_union([from_int, from_none], obj.get("expiredTime"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        return Item(item_id, expired_time, amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["itemId"] = from_union([from_str, from_none], self.item_id)
        result["expiredTime"] = from_union([from_int, from_none], self.expired_time)
        result["amount"] = from_union([from_int, from_none], self.amount)
        return result


@dataclass
class MessageSchedule:
    message_id: Optional[str] = None
    scheduled_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'MessageSchedule':
        assert isinstance(obj, dict)
        message_id = from_union([from_str, from_none], obj.get("messageId"))
        scheduled_time = from_union([from_int, from_none], obj.get("scheduledTime"))
        return MessageSchedule(message_id, scheduled_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["messageId"] = from_union([from_str, from_none], self.message_id)
        result["scheduledTime"] = from_union([from_int, from_none], self.scheduled_time)
        return result


@dataclass
class Message:
    message_id: Optional[str] = None
    message_status_type: Optional[int] = None
    select_message_detail_ids: Optional[List[str]] = None
    arrived_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Message':
        assert isinstance(obj, dict)
        message_id = from_union([from_str, from_none], obj.get("messageId"))
        message_status_type = from_union([from_int, from_none], obj.get("messageStatusType"))
        select_message_detail_ids = from_union([lambda x: from_list(from_str, x), from_none], obj.get("selectMessageDetailIds"))
        arrived_time = from_union([from_int, from_none], obj.get("arrivedTime"))
        return Message(message_id, message_status_type, select_message_detail_ids, arrived_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["messageId"] = from_union([from_str, from_none], self.message_id)
        result["messageStatusType"] = from_union([from_int, from_none], self.message_status_type)
        result["selectMessageDetailIds"] = from_union([lambda x: from_list(from_str, x), from_none], self.select_message_detail_ids)
        result["arrivedTime"] = from_union([from_int, from_none], self.arrived_time)
        return result


@dataclass
class Mission:
    mission_id: Optional[str] = None
    current_threshold: Optional[int] = None
    progress: Optional[int] = None
    status_type: Optional[int] = None
    last_update_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Mission':
        assert isinstance(obj, dict)
        mission_id = from_union([from_str, from_none], obj.get("missionId"))
        current_threshold = from_union([from_int, from_none], obj.get("currentThreshold"))
        progress = from_union([from_int, from_none], obj.get("progress"))
        status_type = from_union([from_int, from_none], obj.get("statusType"))
        last_update_time = from_union([from_int, from_none], obj.get("lastUpdateTime"))
        return Mission(mission_id, current_threshold, progress, status_type, last_update_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["missionId"] = from_union([from_str, from_none], self.mission_id)
        result["currentThreshold"] = from_union([from_int, from_none], self.current_threshold)
        result["progress"] = from_union([from_int, from_none], self.progress)
        result["statusType"] = from_union([from_int, from_none], self.status_type)
        result["lastUpdateTime"] = from_union([from_int, from_none], self.last_update_time)
        return result


@dataclass
class Music:
    music_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Music':
        assert isinstance(obj, dict)
        music_id = from_union([from_str, from_none], obj.get("musicId"))
        return Music(music_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["musicId"] = from_union([from_str, from_none], self.music_id)
        return result


@dataclass
class Notification:
    notification_type: Optional[int] = None
    valid: Optional[bool] = None
    start_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Notification':
        assert isinstance(obj, dict)
        notification_type = from_union([from_int, from_none], obj.get("notificationType"))
        valid = from_union([from_bool, from_none], obj.get("valid"))
        start_time = from_union([from_int, from_none], obj.get("startTime"))
        return Notification(notification_type, valid, start_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["notificationType"] = from_union([from_int, from_none], self.notification_type)
        result["valid"] = from_union([from_bool, from_none], self.valid)
        result["startTime"] = from_union([from_int, from_none], self.start_time)
        return result


@dataclass
class Ability:
    photo_ability_id: Optional[str] = None
    effect_value: Optional[int] = None
    mission_id: Optional[str] = None
    grade: Optional[int] = None
    is_available: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Ability':
        assert isinstance(obj, dict)
        photo_ability_id = from_union([from_str, from_none], obj.get("photoAbilityId"))
        effect_value = from_union([from_int, from_none], obj.get("effectValue"))
        mission_id = from_union([from_none, from_str], obj.get("missionId"))
        grade = from_union([from_int, from_none], obj.get("grade"))
        is_available = from_union([from_bool, from_none], obj.get("isAvailable"))
        return Ability(photo_ability_id, effect_value, mission_id, grade, is_available)

    def to_dict(self) -> dict:
        result: dict = {}
        result["photoAbilityId"] = from_union([from_str, from_none], self.photo_ability_id)
        result["effectValue"] = from_union([from_int, from_none], self.effect_value)
        result["missionId"] = from_union([from_none, from_str], self.mission_id)
        result["grade"] = from_union([from_int, from_none], self.grade)
        result["isAvailable"] = from_union([from_bool, from_none], self.is_available)
        return result


class EventName(Enum):
    VENU_S_バトル = "VENUSバトル"
    カフェ = "カフェ"
    クリスマス = "クリスマス"
    ハイスコアライブ = "ハイスコアライブ"
    フォトイベント = "フォトイベント"
    メインライブ = "メインライブ"
    メモリアルフォト = "メモリアルフォト"
    ユニオンライブ = "ユニオンライブ"
    ライブ = "ライブ"
    休息 = "休息"
    休暇 = "休暇"
    出演 = "出演"
    宣伝 = "宣伝"
    撮影 = "撮影"
    撮影スタジオ = "撮影スタジオ"
    月森の丘 = "月森の丘"
    番組配信 = "番組配信"


@dataclass
class Photo:
    focus_character_id: None
    photo_id: Optional[UUID] = None
    asset_id: Optional[str] = None
    image_type: Optional[int] = None
    character_ids: Optional[List[CharacterID]] = None
    name: Optional[str] = None
    rarity: Optional[int] = None
    place_name: Optional[str] = None
    event_name: Optional[EventName] = None
    locked: Optional[bool] = None
    level: Optional[int] = None
    rerollable: Optional[bool] = None
    abilities: Optional[List[Ability]] = None
    shooting_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Photo':
        assert isinstance(obj, dict)
        focus_character_id = from_none(obj.get("focusCharacterId"))
        photo_id = from_union([lambda x: UUID(x), from_none], obj.get("photoId"))
        asset_id = from_union([from_str, from_none], obj.get("assetId"))
        image_type = from_union([from_int, from_none], obj.get("imageType"))
        character_ids = from_union([lambda x: from_list(CharacterID, x), from_none], obj.get("characterIds"))
        name = from_union([from_str, from_none], obj.get("name"))
        rarity = from_union([from_int, from_none], obj.get("rarity"))
        place_name = from_union([from_str, from_none], obj.get("placeName"))
        event_name = from_union([EventName, from_none], obj.get("eventName"))
        locked = from_union([from_bool, from_none], obj.get("locked"))
        level = from_union([from_int, from_none], obj.get("level"))
        rerollable = from_union([from_bool, from_none], obj.get("rerollable"))
        abilities = from_union([lambda x: from_list(Ability.from_dict, x), from_none], obj.get("abilities"))
        shooting_time = from_union([from_int, from_none], obj.get("shootingTime"))
        return Photo(focus_character_id, photo_id, asset_id, image_type, character_ids, name, rarity, place_name, event_name, locked, level, rerollable, abilities, shooting_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["focusCharacterId"] = from_none(self.focus_character_id)
        result["photoId"] = from_union([lambda x: str(x), from_none], self.photo_id)
        result["assetId"] = from_union([from_str, from_none], self.asset_id)
        result["imageType"] = from_union([from_int, from_none], self.image_type)
        result["characterIds"] = from_union([lambda x: from_list(lambda x: to_enum(CharacterID, x), x), from_none], self.character_ids)
        result["name"] = from_union([from_str, from_none], self.name)
        result["rarity"] = from_union([from_int, from_none], self.rarity)
        result["placeName"] = from_union([from_str, from_none], self.place_name)
        result["eventName"] = from_union([lambda x: to_enum(EventName, x), from_none], self.event_name)
        result["locked"] = from_union([from_bool, from_none], self.locked)
        result["level"] = from_union([from_int, from_none], self.level)
        result["rerollable"] = from_union([from_bool, from_none], self.rerollable)
        result["abilities"] = from_union([lambda x: from_list(lambda x: to_class(Ability, x), x), from_none], self.abilities)
        result["shootingTime"] = from_union([from_int, from_none], self.shooting_time)
        return result


@dataclass
class PhotoReport:
    photos: Optional[List[Photo]] = None
    received: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'PhotoReport':
        assert isinstance(obj, dict)
        photos = from_union([lambda x: from_list(Photo.from_dict, x), from_none], obj.get("photos"))
        received = from_union([from_bool, from_none], obj.get("received"))
        return PhotoReport(photos, received)

    def to_dict(self) -> dict:
        result: dict = {}
        result["photos"] = from_union([lambda x: from_list(lambda x: to_class(Photo, x), x), from_none], self.photos)
        result["received"] = from_union([from_bool, from_none], self.received)
        return result


@dataclass
class Point:
    point_type: Optional[int] = None
    amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Point':
        assert isinstance(obj, dict)
        point_type = from_union([from_int, from_none], obj.get("pointType"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        return Point(point_type, amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["pointType"] = from_union([from_int, from_none], self.point_type)
        result["amount"] = from_union([from_int, from_none], self.amount)
        return result


@dataclass
class TwitterInfo:
    twitter_user_id: Optional[str] = None
    twitter_screen_name: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'TwitterInfo':
        assert isinstance(obj, dict)
        twitter_user_id = from_union([from_str, from_none], obj.get("twitterUserID"))
        twitter_screen_name = from_union([from_str, from_none], obj.get("twitterScreenName"))
        return TwitterInfo(twitter_user_id, twitter_screen_name)

    def to_dict(self) -> dict:
        result: dict = {}
        result["twitterUserID"] = from_union([from_str, from_none], self.twitter_user_id)
        result["twitterScreenName"] = from_union([from_str, from_none], self.twitter_screen_name)
        return result


@dataclass
class Profile:
    favorite_card_id: None
    decoration_id: None
    favorite_photo_id: Optional[UUID] = None
    favorite_character_ids: Optional[List[CharacterID]] = None
    message: Optional[str] = None
    birth_month: Optional[int] = None
    birth_day: Optional[int] = None
    background_type: Optional[int] = None
    layout_type: Optional[int] = None
    twitter_info: Optional[TwitterInfo] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Profile':
        assert isinstance(obj, dict)
        favorite_card_id = from_none(obj.get("favoriteCardId"))
        decoration_id = from_none(obj.get("decorationId"))
        favorite_photo_id = from_union([lambda x: UUID(x), from_none], obj.get("favoritePhotoId"))
        favorite_character_ids = from_union([lambda x: from_list(CharacterID, x), from_none], obj.get("favoriteCharacterIds"))
        message = from_union([from_str, from_none], obj.get("message"))
        birth_month = from_union([from_int, from_none], obj.get("birthMonth"))
        birth_day = from_union([from_int, from_none], obj.get("birthDay"))
        background_type = from_union([from_int, from_none], obj.get("backgroundType"))
        layout_type = from_union([from_int, from_none], obj.get("layoutType"))
        twitter_info = from_union([TwitterInfo.from_dict, from_none], obj.get("twitterInfo"))
        return Profile(favorite_card_id, decoration_id, favorite_photo_id, favorite_character_ids, message, birth_month, birth_day, background_type, layout_type, twitter_info)

    def to_dict(self) -> dict:
        result: dict = {}
        result["favoriteCardId"] = from_none(self.favorite_card_id)
        result["decorationId"] = from_none(self.decoration_id)
        result["favoritePhotoId"] = from_union([lambda x: str(x), from_none], self.favorite_photo_id)
        result["favoriteCharacterIds"] = from_union([lambda x: from_list(lambda x: to_enum(CharacterID, x), x), from_none], self.favorite_character_ids)
        result["message"] = from_union([from_str, from_none], self.message)
        result["birthMonth"] = from_union([from_int, from_none], self.birth_month)
        result["birthDay"] = from_union([from_int, from_none], self.birth_day)
        result["backgroundType"] = from_union([from_int, from_none], self.background_type)
        result["layoutType"] = from_union([from_int, from_none], self.layout_type)
        result["twitterInfo"] = from_union([lambda x: to_class(TwitterInfo, x), from_none], self.twitter_info)
        return result


@dataclass
class Quest:
    quest_id: Optional[str] = None
    daily_clear_count: Optional[int] = None
    last_cleared_time: Optional[int] = None
    highest_score: Optional[int] = None
    highest_score_time: Optional[int] = None
    highest_rank: Optional[int] = None
    current_ranking_highest_score: Optional[int] = None
    current_ranking_highest_score_time: Optional[int] = None
    current_ranking_highest_rank: Optional[int] = None
    highest_score_rank: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Quest':
        assert isinstance(obj, dict)
        quest_id = from_union([from_str, from_none], obj.get("questId"))
        daily_clear_count = from_union([from_int, from_none], obj.get("dailyClearCount"))
        last_cleared_time = from_union([from_int, from_none], obj.get("lastClearedTime"))
        highest_score = from_union([from_int, from_none], obj.get("highestScore"))
        highest_score_time = from_union([from_int, from_none], obj.get("highestScoreTime"))
        highest_rank = from_union([from_int, from_none], obj.get("highestRank"))
        current_ranking_highest_score = from_union([from_int, from_none], obj.get("currentRankingHighestScore"))
        current_ranking_highest_score_time = from_union([from_int, from_none], obj.get("currentRankingHighestScoreTime"))
        current_ranking_highest_rank = from_union([from_int, from_none], obj.get("currentRankingHighestRank"))
        highest_score_rank = from_union([from_int, from_none], obj.get("highestScoreRank"))
        return Quest(quest_id, daily_clear_count, last_cleared_time, highest_score, highest_score_time, highest_rank, current_ranking_highest_score, current_ranking_highest_score_time, current_ranking_highest_rank, highest_score_rank)

    def to_dict(self) -> dict:
        result: dict = {}
        result["questId"] = from_union([from_str, from_none], self.quest_id)
        result["dailyClearCount"] = from_union([from_int, from_none], self.daily_clear_count)
        result["lastClearedTime"] = from_union([from_int, from_none], self.last_cleared_time)
        result["highestScore"] = from_union([from_int, from_none], self.highest_score)
        result["highestScoreTime"] = from_union([from_int, from_none], self.highest_score_time)
        result["highestRank"] = from_union([from_int, from_none], self.highest_rank)
        result["currentRankingHighestScore"] = from_union([from_int, from_none], self.current_ranking_highest_score)
        result["currentRankingHighestScoreTime"] = from_union([from_int, from_none], self.current_ranking_highest_score_time)
        result["currentRankingHighestRank"] = from_union([from_int, from_none], self.current_ranking_highest_rank)
        result["highestScoreRank"] = from_union([from_int, from_none], self.highest_score_rank)
        return result


@dataclass
class Staff:
    parameter_type: Optional[int] = None
    level: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Staff':
        assert isinstance(obj, dict)
        parameter_type = from_union([from_int, from_none], obj.get("parameterType"))
        level = from_union([from_int, from_none], obj.get("level"))
        return Staff(parameter_type, level)

    def to_dict(self) -> dict:
        result: dict = {}
        result["parameterType"] = from_union([from_int, from_none], self.parameter_type)
        result["level"] = from_union([from_int, from_none], self.level)
        return result


@dataclass
class Story:
    story_id: Optional[str] = None
    status_type: Optional[int] = None
    is_invalid: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Story':
        assert isinstance(obj, dict)
        story_id = from_union([from_str, from_none], obj.get("storyId"))
        status_type = from_union([from_int, from_none], obj.get("statusType"))
        is_invalid = from_union([from_bool, from_none], obj.get("isInvalid"))
        return Story(story_id, status_type, is_invalid)

    def to_dict(self) -> dict:
        result: dict = {}
        result["storyId"] = from_union([from_str, from_none], self.story_id)
        result["statusType"] = from_union([from_int, from_none], self.status_type)
        result["isInvalid"] = from_union([from_bool, from_none], self.is_invalid)
        return result


@dataclass
class Telephone:
    telephone_id: Optional[str] = None
    unlocked_time: Optional[int] = None
    scheduled_time: Optional[int] = None
    telephone_status_type: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Telephone':
        assert isinstance(obj, dict)
        telephone_id = from_union([from_str, from_none], obj.get("telephoneId"))
        unlocked_time = from_union([from_int, from_none], obj.get("unlockedTime"))
        scheduled_time = from_union([from_int, from_none], obj.get("scheduledTime"))
        telephone_status_type = from_union([from_int, from_none], obj.get("telephoneStatusType"))
        return Telephone(telephone_id, unlocked_time, scheduled_time, telephone_status_type)

    def to_dict(self) -> dict:
        result: dict = {}
        result["telephoneId"] = from_union([from_str, from_none], self.telephone_id)
        result["unlockedTime"] = from_union([from_int, from_none], self.unlocked_time)
        result["scheduledTime"] = from_union([from_int, from_none], self.scheduled_time)
        result["telephoneStatusType"] = from_union([from_int, from_none], self.telephone_status_type)
        return result


@dataclass
class Tutorial:
    tutorial_type: Optional[int] = None
    step: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Tutorial':
        assert isinstance(obj, dict)
        tutorial_type = from_union([from_int, from_none], obj.get("tutorialType"))
        step = from_union([from_int, from_none], obj.get("step"))
        return Tutorial(tutorial_type, step)

    def to_dict(self) -> dict:
        result: dict = {}
        result["tutorialType"] = from_union([from_int, from_none], self.tutorial_type)
        result["step"] = from_union([from_int, from_none], self.step)
        return result


@dataclass
class User:
    name: Optional[str] = None
    manager_exp: Optional[int] = None
    deck_sequence: Optional[int] = None
    guild_id: Optional[str] = None
    last_guild_check_time: Optional[int] = None
    division_id: Optional[str] = None
    first_division_id: Optional[str] = None
    emblem_id: Optional[str] = None
    deck_max_overall_value: Optional[int] = None
    last_created_forum_thread_datetime: Optional[int] = None
    game_start_time: Optional[int] = None
    last_login_time: Optional[int] = None
    card_support_level: Optional[int] = None
    card_support_release_count: Optional[int] = None
    next_photo_image_id: Optional[UUID] = None
    division_moved_time: Optional[int] = None
    is_reviewed: Optional[bool] = None
    quest_main_area_last_clear_character_ids: Optional[List[CharacterID]] = None
    highest_salary: Optional[int] = None
    tutorial_cleared_time: Optional[int] = None
    manager_level: Optional[int] = None
    card_support_max_number: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'User':
        assert isinstance(obj, dict)
        name = from_union([from_str, from_none], obj.get("name"))
        manager_exp = from_union([from_int, from_none], obj.get("managerExp"))
        deck_sequence = from_union([from_int, from_none], obj.get("deckSequence"))
        guild_id = from_union([from_str, from_none], obj.get("guildId"))
        last_guild_check_time = from_union([from_int, from_none], obj.get("lastGuildCheckTime"))
        division_id = from_union([from_str, from_none], obj.get("divisionId"))
        first_division_id = from_union([from_str, from_none], obj.get("firstDivisionId"))
        emblem_id = from_union([from_str, from_none], obj.get("emblemId"))
        deck_max_overall_value = from_union([from_int, from_none], obj.get("deckMaxOverallValue"))
        last_created_forum_thread_datetime = from_union([from_int, from_none], obj.get("lastCreatedForumThreadDatetime"))
        game_start_time = from_union([from_int, from_none], obj.get("gameStartTime"))
        last_login_time = from_union([from_int, from_none], obj.get("lastLoginTime"))
        card_support_level = from_union([from_int, from_none], obj.get("cardSupportLevel"))
        card_support_release_count = from_union([from_int, from_none], obj.get("cardSupportReleaseCount"))
        next_photo_image_id = from_union([lambda x: UUID(x), from_none], obj.get("nextPhotoImageId"))
        division_moved_time = from_union([from_int, from_none], obj.get("divisionMovedTime"))
        is_reviewed = from_union([from_bool, from_none], obj.get("isReviewed"))
        quest_main_area_last_clear_character_ids = from_union([lambda x: from_list(CharacterID, x), from_none], obj.get("questMainAreaLastClearCharacterIds"))
        highest_salary = from_union([from_int, from_none], obj.get("highestSalary"))
        tutorial_cleared_time = from_union([from_int, from_none], obj.get("tutorialClearedTime"))
        manager_level = from_union([from_int, from_none], obj.get("managerLevel"))
        card_support_max_number = from_union([from_int, from_none], obj.get("cardSupportMaxNumber"))
        return User(name, manager_exp, deck_sequence, guild_id, last_guild_check_time, division_id, first_division_id, emblem_id, deck_max_overall_value, last_created_forum_thread_datetime, game_start_time, last_login_time, card_support_level, card_support_release_count, next_photo_image_id, division_moved_time, is_reviewed, quest_main_area_last_clear_character_ids, highest_salary, tutorial_cleared_time, manager_level, card_support_max_number)

    def to_dict(self) -> dict:
        result: dict = {}
        result["name"] = from_union([from_str, from_none], self.name)
        result["managerExp"] = from_union([from_int, from_none], self.manager_exp)
        result["deckSequence"] = from_union([from_int, from_none], self.deck_sequence)
        result["guildId"] = from_union([from_str, from_none], self.guild_id)
        result["lastGuildCheckTime"] = from_union([from_int, from_none], self.last_guild_check_time)
        result["divisionId"] = from_union([from_str, from_none], self.division_id)
        result["firstDivisionId"] = from_union([from_str, from_none], self.first_division_id)
        result["emblemId"] = from_union([from_str, from_none], self.emblem_id)
        result["deckMaxOverallValue"] = from_union([from_int, from_none], self.deck_max_overall_value)
        result["lastCreatedForumThreadDatetime"] = from_union([from_int, from_none], self.last_created_forum_thread_datetime)
        result["gameStartTime"] = from_union([from_int, from_none], self.game_start_time)
        result["lastLoginTime"] = from_union([from_int, from_none], self.last_login_time)
        result["cardSupportLevel"] = from_union([from_int, from_none], self.card_support_level)
        result["cardSupportReleaseCount"] = from_union([from_int, from_none], self.card_support_release_count)
        result["nextPhotoImageId"] = from_union([lambda x: str(x), from_none], self.next_photo_image_id)
        result["divisionMovedTime"] = from_union([from_int, from_none], self.division_moved_time)
        result["isReviewed"] = from_union([from_bool, from_none], self.is_reviewed)
        result["questMainAreaLastClearCharacterIds"] = from_union([lambda x: from_list(lambda x: to_enum(CharacterID, x), x), from_none], self.quest_main_area_last_clear_character_ids)
        result["highestSalary"] = from_union([from_int, from_none], self.highest_salary)
        result["tutorialClearedTime"] = from_union([from_int, from_none], self.tutorial_cleared_time)
        result["managerLevel"] = from_union([from_int, from_none], self.manager_level)
        result["cardSupportMaxNumber"] = from_union([from_int, from_none], self.card_support_max_number)
        return result


@dataclass
class UserPublic:
    server_user_id: Optional[UUID] = None
    public_user_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserPublic':
        assert isinstance(obj, dict)
        server_user_id = from_union([lambda x: UUID(x), from_none], obj.get("serverUserId"))
        public_user_id = from_union([from_str, from_none], obj.get("publicUserId"))
        return UserPublic(server_user_id, public_user_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["serverUserId"] = from_union([lambda x: str(x), from_none], self.server_user_id)
        result["publicUserId"] = from_union([from_str, from_none], self.public_user_id)
        return result


@dataclass
class UserResponse:
    user: Optional[User] = None
    items: Optional[List[Item]] = None
    cards: Optional[List[Card]] = None
    characters: Optional[List[Character]] = None
    costumes: Optional[List[Costume]] = None
    accessories: Optional[List[Accessory]] = None
    photos: Optional[List[Photo]] = None
    decks: Optional[List[Deck]] = None
    deck_positions: Optional[List[DeckPosition]] = None
    stories: Optional[List[Story]] = None
    points: Optional[List[Point]] = None
    staffs: Optional[List[Staff]] = None
    messages: Optional[List[Message]] = None
    telephones: Optional[List[Telephone]] = None
    missions: Optional[List[Mission]] = None
    profile: Optional[Profile] = None
    emblems: Optional[List[Emblem]] = None
    character_musics: Optional[List[CharacterMusic]] = None
    balance: Optional[Balance] = None
    total_count: Optional[Dict[str, int]] = None
    areas: Optional[List[Area]] = None
    quests: Optional[List[Quest]] = None
    gacha_buttons: Optional[List[GachaButton]] = None
    home_talks: Optional[List[HomeTalk]] = None
    photo_report: Optional[PhotoReport] = None
    card_supports: Optional[List[CardSupport]] = None
    message_schedules: Optional[List[MessageSchedule]] = None
    notifications: Optional[List[Notification]] = None
    hierarchy: Optional[Hierarchy] = None
    tutorials: Optional[List[Tutorial]] = None
    home_positions: Optional[List[HomePosition]] = None
    musics: Optional[List[Music]] = None
    decorations: Optional[List[Decoration]] = None
    user_public: Optional[UserPublic] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserResponse':
        assert isinstance(obj, dict)
        user = from_union([User.from_dict, from_none], obj.get("user"))
        items = from_union([lambda x: from_list(Item.from_dict, x), from_none], obj.get("items"))
        cards = from_union([lambda x: from_list(Card.from_dict, x), from_none], obj.get("cards"))
        characters = from_union([lambda x: from_list(Character.from_dict, x), from_none], obj.get("characters"))
        costumes = from_union([lambda x: from_list(Costume.from_dict, x), from_none], obj.get("costumes"))
        accessories = from_union([lambda x: from_list(Accessory.from_dict, x), from_none], obj.get("accessories"))
        photos = from_union([lambda x: from_list(Photo.from_dict, x), from_none], obj.get("photos"))
        decks = from_union([lambda x: from_list(Deck.from_dict, x), from_none], obj.get("decks"))
        deck_positions = from_union([lambda x: from_list(DeckPosition.from_dict, x), from_none], obj.get("deckPositions"))
        stories = from_union([lambda x: from_list(Story.from_dict, x), from_none], obj.get("stories"))
        points = from_union([lambda x: from_list(Point.from_dict, x), from_none], obj.get("points"))
        staffs = from_union([lambda x: from_list(Staff.from_dict, x), from_none], obj.get("staffs"))
        messages = from_union([lambda x: from_list(Message.from_dict, x), from_none], obj.get("messages"))
        telephones = from_union([lambda x: from_list(Telephone.from_dict, x), from_none], obj.get("telephones"))
        missions = from_union([lambda x: from_list(Mission.from_dict, x), from_none], obj.get("missions"))
        profile = from_union([Profile.from_dict, from_none], obj.get("profile"))
        emblems = from_union([lambda x: from_list(Emblem.from_dict, x), from_none], obj.get("emblems"))
        character_musics = from_union([lambda x: from_list(CharacterMusic.from_dict, x), from_none], obj.get("characterMusics"))
        balance = from_union([Balance.from_dict, from_none], obj.get("balance"))
        total_count = from_union([lambda x: from_dict(from_int, x), from_none], obj.get("totalCount"))
        areas = from_union([lambda x: from_list(Area.from_dict, x), from_none], obj.get("areas"))
        quests = from_union([lambda x: from_list(Quest.from_dict, x), from_none], obj.get("quests"))
        gacha_buttons = from_union([lambda x: from_list(GachaButton.from_dict, x), from_none], obj.get("gachaButtons"))
        home_talks = from_union([lambda x: from_list(HomeTalk.from_dict, x), from_none], obj.get("homeTalks"))
        photo_report = from_union([PhotoReport.from_dict, from_none], obj.get("photoReport"))
        card_supports = from_union([lambda x: from_list(CardSupport.from_dict, x), from_none], obj.get("cardSupports"))
        message_schedules = from_union([lambda x: from_list(MessageSchedule.from_dict, x), from_none], obj.get("messageSchedules"))
        notifications = from_union([lambda x: from_list(Notification.from_dict, x), from_none], obj.get("notifications"))
        hierarchy = from_union([Hierarchy.from_dict, from_none], obj.get("hierarchy"))
        tutorials = from_union([lambda x: from_list(Tutorial.from_dict, x), from_none], obj.get("tutorials"))
        home_positions = from_union([lambda x: from_list(HomePosition.from_dict, x), from_none], obj.get("homePositions"))
        musics = from_union([lambda x: from_list(Music.from_dict, x), from_none], obj.get("musics"))
        decorations = from_union([lambda x: from_list(Decoration.from_dict, x), from_none], obj.get("decorations"))
        user_public = from_union([UserPublic.from_dict, from_none], obj.get("userPublic"))
        return UserResponse(user, items, cards, characters, costumes, accessories, photos, decks, deck_positions, stories, points, staffs, messages, telephones, missions, profile, emblems, character_musics, balance, total_count, areas, quests, gacha_buttons, home_talks, photo_report, card_supports, message_schedules, notifications, hierarchy, tutorials, home_positions, musics, decorations, user_public)

    def to_dict(self) -> dict:
        result: dict = {}
        result["user"] = from_union([lambda x: to_class(User, x), from_none], self.user)
        result["items"] = from_union([lambda x: from_list(lambda x: to_class(Item, x), x), from_none], self.items)
        result["cards"] = from_union([lambda x: from_list(lambda x: to_class(Card, x), x), from_none], self.cards)
        result["characters"] = from_union([lambda x: from_list(lambda x: to_class(Character, x), x), from_none], self.characters)
        result["costumes"] = from_union([lambda x: from_list(lambda x: to_class(Costume, x), x), from_none], self.costumes)
        result["accessories"] = from_union([lambda x: from_list(lambda x: to_class(Accessory, x), x), from_none], self.accessories)
        result["photos"] = from_union([lambda x: from_list(lambda x: to_class(Photo, x), x), from_none], self.photos)
        result["decks"] = from_union([lambda x: from_list(lambda x: to_class(Deck, x), x), from_none], self.decks)
        result["deckPositions"] = from_union([lambda x: from_list(lambda x: to_class(DeckPosition, x), x), from_none], self.deck_positions)
        result["stories"] = from_union([lambda x: from_list(lambda x: to_class(Story, x), x), from_none], self.stories)
        result["points"] = from_union([lambda x: from_list(lambda x: to_class(Point, x), x), from_none], self.points)
        result["staffs"] = from_union([lambda x: from_list(lambda x: to_class(Staff, x), x), from_none], self.staffs)
        result["messages"] = from_union([lambda x: from_list(lambda x: to_class(Message, x), x), from_none], self.messages)
        result["telephones"] = from_union([lambda x: from_list(lambda x: to_class(Telephone, x), x), from_none], self.telephones)
        result["missions"] = from_union([lambda x: from_list(lambda x: to_class(Mission, x), x), from_none], self.missions)
        result["profile"] = from_union([lambda x: to_class(Profile, x), from_none], self.profile)
        result["emblems"] = from_union([lambda x: from_list(lambda x: to_class(Emblem, x), x), from_none], self.emblems)
        result["characterMusics"] = from_union([lambda x: from_list(lambda x: to_class(CharacterMusic, x), x), from_none], self.character_musics)
        result["balance"] = from_union([lambda x: to_class(Balance, x), from_none], self.balance)
        result["totalCount"] = from_union([lambda x: from_dict(from_int, x), from_none], self.total_count)
        result["areas"] = from_union([lambda x: from_list(lambda x: to_class(Area, x), x), from_none], self.areas)
        result["quests"] = from_union([lambda x: from_list(lambda x: to_class(Quest, x), x), from_none], self.quests)
        result["gachaButtons"] = from_union([lambda x: from_list(lambda x: to_class(GachaButton, x), x), from_none], self.gacha_buttons)
        result["homeTalks"] = from_union([lambda x: from_list(lambda x: to_class(HomeTalk, x), x), from_none], self.home_talks)
        result["photoReport"] = from_union([lambda x: to_class(PhotoReport, x), from_none], self.photo_report)
        result["cardSupports"] = from_union([lambda x: from_list(lambda x: to_class(CardSupport, x), x), from_none], self.card_supports)
        result["messageSchedules"] = from_union([lambda x: from_list(lambda x: to_class(MessageSchedule, x), x), from_none], self.message_schedules)
        result["notifications"] = from_union([lambda x: from_list(lambda x: to_class(Notification, x), x), from_none], self.notifications)
        result["hierarchy"] = from_union([lambda x: to_class(Hierarchy, x), from_none], self.hierarchy)
        result["tutorials"] = from_union([lambda x: from_list(lambda x: to_class(Tutorial, x), x), from_none], self.tutorials)
        result["homePositions"] = from_union([lambda x: from_list(lambda x: to_class(HomePosition, x), x), from_none], self.home_positions)
        result["musics"] = from_union([lambda x: from_list(lambda x: to_class(Music, x), x), from_none], self.musics)
        result["decorations"] = from_union([lambda x: from_list(lambda x: to_class(Decoration, x), x), from_none], self.decorations)
        result["userPublic"] = from_union([lambda x: to_class(UserPublic, x), from_none], self.user_public)
        return result


def user_response_from_dict(s: Any) -> UserResponse:
    return UserResponse.from_dict(s)


def user_response_to_dict(x: UserResponse) -> Any:
    return to_class(UserResponse, x)

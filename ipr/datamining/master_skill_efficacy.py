# Generated by https://quicktype.io
# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = master_skill_efficacy_from_dict(json.loads(json_string))

from enum import Enum
from dataclasses import dataclass
from typing import Optional, Any, List, TypeVar, Type, Callable, cast


T = TypeVar("T")
EnumT = TypeVar("EnumT", bound=Enum)


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def to_enum(c: Type[EnumT], x: Any) -> EnumT:
    assert isinstance(x, c)
    return x.value


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


class SkillTargetID(Enum):
    TARGET_ALL = "target-all"
    TARGET_CENTER = "target-center"
    TARGET_CHARACTER_TYPE_11 = "target-character_type-1-1"
    TARGET_CHARACTER_TYPE_12 = "target-character_type-1-2"
    TARGET_CHARACTER_TYPE_22 = "target-character_type-2-2"
    TARGET_CHARACTER_TYPE_32 = "target-character_type-3-2"
    TARGET_DANCE_1 = "target-dance-1"
    TARGET_DANCE_2 = "target-dance-2"
    TARGET_DANCE_HIGHER_1 = "target-dance_higher-1"
    TARGET_DANCE_HIGHER_2 = "target-dance_higher-2"
    TARGET_DANCE_HIGHER_3 = "target-dance_higher-3"
    TARGET_NEIGHBOR = "target-neighbor"
    TARGET_OPPONENT_CENTER = "target-opponent_center"
    TARGET_OPPONENT_CHARACTER_TYPE_12 = "target-opponent_character_type-1-2"
    TARGET_OPPONENT_SAME_POSITION = "target-opponent_same_position"
    TARGET_POSITION_ATTRIBUTE_VISUAL_2 = "target-position_attribute_visual-2"
    TARGET_SELF = "target-self"
    TARGET_STAMINA_HIGHER_1 = "target-stamina_higher-1"
    TARGET_STAMINA_LOWER_1 = "target-stamina_lower-1"
    TARGET_STAMINA_LOWER_2 = "target-stamina_lower-2"
    TARGET_STAMINA_LOWER_3 = "target-stamina_lower-3"
    TARGET_STATUS_DANCE_UP_1 = "target-status-dance_up-1"
    TARGET_STATUS_DANCE_UP_3 = "target-status-dance_up-3"
    TARGET_STATUS_SKILL_SCORE_UP_1 = "target-status-skill_score_up-1"
    TARGET_STATUS_VOCAL_UP_1 = "target-status-vocal_up-1"
    TARGET_TRIGGER = "target-trigger"
    TARGET_TRIGGER_2 = "target-trigger-2"
    TARGET_VISUAL_3 = "target-visual-3"
    TARGET_VISUAL_HIGHER_1 = "target-visual_higher-1"
    TARGET_VISUAL_HIGHER_2 = "target-visual_higher-2"
    TARGET_VISUAL_HIGHER_3 = "target-visual_higher-3"
    TARGET_VOCAL_2 = "target-vocal-2"
    TARGET_VOCAL_HIGHER_1 = "target-vocal_higher-1"
    TARGET_VOCAL_HIGHER_2 = "target-vocal_higher-2"
    TARGET_VOCAL_HIGHER_3 = "target-vocal_higher-3"


@dataclass
class MasterSkillEfficacy:
    short_description: None
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[int] = None
    description: Optional[str] = None
    grade: Optional[int] = None
    max_grade: Optional[int] = None
    skill_target_id: Optional[SkillTargetID] = None

    @staticmethod
    def from_dict(obj: Any) -> 'MasterSkillEfficacy':
        assert isinstance(obj, dict)
        short_description = from_none(obj.get("shortDescription"))
        id = from_union([from_str, from_none], obj.get("id"))
        name = from_union([from_str, from_none], obj.get("name"))
        type = from_union([from_int, from_none], obj.get("type"))
        description = from_union([from_str, from_none], obj.get("description"))
        grade = from_union([from_int, from_none], obj.get("grade"))
        max_grade = from_union([from_int, from_none], obj.get("maxGrade"))
        skill_target_id = from_union(
            [from_none, SkillTargetID], obj.get("skillTargetId"))
        return MasterSkillEfficacy(short_description, id, name, type, description, grade, max_grade, skill_target_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["shortDescription"] = from_none(self.short_description)
        result["id"] = from_union([from_str, from_none], self.id)
        result["name"] = from_union([from_str, from_none], self.name)
        result["type"] = from_union([from_int, from_none], self.type)
        result["description"] = from_union(
            [from_str, from_none], self.description)
        result["grade"] = from_union([from_int, from_none], self.grade)
        result["maxGrade"] = from_union([from_int, from_none], self.max_grade)
        result["skillTargetId"] = from_union(
            [from_none, lambda x: to_enum(SkillTargetID, x)], self.skill_target_id)
        return result


def master_skill_efficacy_from_dict(s: Any) -> List[MasterSkillEfficacy]:
    return from_list(MasterSkillEfficacy.from_dict, s)


def master_skill_efficacy_to_dict(x: List[MasterSkillEfficacy]) -> Any:
    return from_list(lambda x: to_class(MasterSkillEfficacy, x), x)

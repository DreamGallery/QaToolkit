# Generated by https://quicktype.io
# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = master_skill_from_dict(json.loads(json_string))

from dataclasses import dataclass
from typing import Optional, Any, List, TypeVar, Callable, Type, cast


T = TypeVar("T")


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


@dataclass
class SkillDetail:
    efficacy_id: Optional[str] = None
    trigger_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'SkillDetail':
        assert isinstance(obj, dict)
        efficacy_id = from_union([from_str, from_none], obj.get("efficacyId"))
        trigger_id = from_union([from_none, from_str], obj.get("triggerId"))
        return SkillDetail(efficacy_id, trigger_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["efficacyId"] = from_union(
            [from_str, from_none], self.efficacy_id)
        result["triggerId"] = from_union(
            [from_none, from_str], self.trigger_id)
        return result


@dataclass
class Level:
    level: Optional[int] = None
    description: Optional[str] = None
    short_description: Optional[str] = None
    required_item_amount: Optional[int] = None
    required_card_level: Optional[int] = None
    stamina: Optional[int] = None
    trigger_id: Optional[str] = None
    probability_permil: Optional[int] = None
    limit_count: Optional[int] = None
    cool_time: Optional[int] = None
    skill_details: Optional[List[SkillDetail]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Level':
        assert isinstance(obj, dict)
        level = from_union([from_int, from_none], obj.get("level"))
        description = from_union([from_str, from_none], obj.get("description"))
        short_description = from_union(
            [from_str, from_none], obj.get("shortDescription"))
        required_item_amount = from_union(
            [from_int, from_none], obj.get("requiredItemAmount"))
        required_card_level = from_union(
            [from_int, from_none], obj.get("requiredCardLevel"))
        stamina = from_union([from_int, from_none], obj.get("stamina"))
        trigger_id = from_union([from_none, from_str], obj.get("triggerId"))
        probability_permil = from_union(
            [from_int, from_none], obj.get("probabilityPermil"))
        limit_count = from_union([from_int, from_none], obj.get("limitCount"))
        cool_time = from_union([from_int, from_none], obj.get("coolTime"))
        skill_details = from_union([lambda x: from_list(
            SkillDetail.from_dict, x), from_none], obj.get("skillDetails"))
        return Level(level, description, short_description, required_item_amount, required_card_level, stamina, trigger_id, probability_permil, limit_count, cool_time, skill_details)

    def to_dict(self) -> dict:
        result: dict = {}
        result["level"] = from_union([from_int, from_none], self.level)
        result["description"] = from_union(
            [from_str, from_none], self.description)
        result["shortDescription"] = from_union(
            [from_str, from_none], self.short_description)
        result["requiredItemAmount"] = from_union(
            [from_int, from_none], self.required_item_amount)
        result["requiredCardLevel"] = from_union(
            [from_int, from_none], self.required_card_level)
        result["stamina"] = from_union([from_int, from_none], self.stamina)
        result["triggerId"] = from_union(
            [from_none, from_str], self.trigger_id)
        result["probabilityPermil"] = from_union(
            [from_int, from_none], self.probability_permil)
        result["limitCount"] = from_union(
            [from_int, from_none], self.limit_count)
        result["coolTime"] = from_union([from_int, from_none], self.cool_time)
        result["skillDetails"] = from_union([lambda x: from_list(
            lambda x: to_class(SkillDetail, x), x), from_none], self.skill_details)
        return result


@dataclass
class MasterSkill:
    id: Optional[str] = None
    name: Optional[str] = None
    category_type: Optional[int] = None
    levels: Optional[List[Level]] = None
    asset_id: Optional[str] = None

    @staticmethod
    def from_dict(obj: Any) -> 'MasterSkill':
        assert isinstance(obj, dict)
        id = from_union([from_str, from_none], obj.get("id"))
        name = from_union([from_str, from_none], obj.get("name"))
        category_type = from_union(
            [from_int, from_none], obj.get("categoryType"))
        levels = from_union([lambda x: from_list(
            Level.from_dict, x), from_none], obj.get("levels"))
        asset_id = from_union([from_none, from_str], obj.get("assetId"))
        return MasterSkill(id, name, category_type, levels, asset_id)

    def to_dict(self) -> dict:
        result: dict = {}
        result["id"] = from_union([from_str, from_none], self.id)
        result["name"] = from_union([from_str, from_none], self.name)
        result["categoryType"] = from_union(
            [from_int, from_none], self.category_type)
        result["levels"] = from_union([lambda x: from_list(
            lambda x: to_class(Level, x), x), from_none], self.levels)
        result["assetId"] = from_union([from_none, from_str], self.asset_id)
        return result


def master_skill_from_dict(s: Any) -> List[MasterSkill]:
    return from_list(MasterSkill.from_dict, s)


def master_skill_to_dict(x: List[MasterSkill]) -> Any:
    return from_list(lambda x: to_class(MasterSkill, x), x)

# Generated by https://quicktype.io
# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = live_result_from_dict(json.loads(json_string))

from dataclasses import dataclass
from typing import Any, Optional, List, Dict, TypeVar, Callable, Type, cast

from skill_manager import SkillOb


T = TypeVar("T")


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def from_bool(x: Any) -> bool:
    assert isinstance(x, bool)
    return x


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def from_dict(f: Callable[[Any], T], x: Any) -> Dict[str, T]:
    assert isinstance(x, dict)
    return {k: f(v) for (k, v) in x.items()}


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


@dataclass
class DeletedData:
    items: None
    accessories: None
    photos: None
    decks: None
    deck_positions: None
    points: None
    message_schedules: None
    stories: None

    @staticmethod
    def from_dict(obj: Any) -> 'DeletedData':
        assert isinstance(obj, dict)
        items = from_none(obj.get("items"))
        accessories = from_none(obj.get("accessories"))
        photos = from_none(obj.get("photos"))
        decks = from_none(obj.get("decks"))
        deck_positions = from_none(obj.get("deckPositions"))
        points = from_none(obj.get("points"))
        message_schedules = from_none(obj.get("messageSchedules"))
        stories = from_none(obj.get("stories"))
        return DeletedData(items, accessories, photos, decks, deck_positions, points, message_schedules, stories)

    def to_dict(self) -> dict:
        result: dict = {}
        result["items"] = from_none(self.items)
        result["accessories"] = from_none(self.accessories)
        result["photos"] = from_none(self.photos)
        result["decks"] = from_none(self.decks)
        result["deckPositions"] = from_none(self.deck_positions)
        result["points"] = from_none(self.points)
        result["messageSchedules"] = from_none(self.message_schedules)
        result["stories"] = from_none(self.stories)
        return result


@dataclass
class Area:
    area_id: Optional[str] = None
    clear_quest_count: Optional[int] = None
    daily_clear_count: Optional[int] = None
    last_cleared_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Area':
        assert isinstance(obj, dict)
        area_id = from_union([from_str, from_none], obj.get("areaId"))
        clear_quest_count = from_union(
            [from_int, from_none], obj.get("clearQuestCount"))
        daily_clear_count = from_union(
            [from_int, from_none], obj.get("dailyClearCount"))
        last_cleared_time = from_union(
            [from_int, from_none], obj.get("lastClearedTime"))
        return Area(area_id, clear_quest_count, daily_clear_count, last_cleared_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["areaId"] = from_union([from_str, from_none], self.area_id)
        result["clearQuestCount"] = from_union(
            [from_int, from_none], self.clear_quest_count)
        result["dailyClearCount"] = from_union(
            [from_int, from_none], self.daily_clear_count)
        result["lastClearedTime"] = from_union(
            [from_int, from_none], self.last_cleared_time)
        return result


@dataclass
class CharacterMusic:
    character_id: Optional[str] = None
    music_id: Optional[str] = None
    mastery_point: Optional[int] = None
    mastery_level: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CharacterMusic':
        assert isinstance(obj, dict)
        character_id = from_union(
            [from_str, from_none], obj.get("characterId"))
        music_id = from_union([from_str, from_none], obj.get("musicId"))
        mastery_point = from_union(
            [from_int, from_none], obj.get("masteryPoint"))
        mastery_level = from_union(
            [from_int, from_none], obj.get("masteryLevel"))
        return CharacterMusic(character_id, music_id, mastery_point, mastery_level)

    def to_dict(self) -> dict:
        result: dict = {}
        result["characterId"] = from_union(
            [from_str, from_none], self.character_id)
        result["musicId"] = from_union([from_str, from_none], self.music_id)
        result["masteryPoint"] = from_union(
            [from_int, from_none], self.mastery_point)
        result["masteryLevel"] = from_union(
            [from_int, from_none], self.mastery_level)
        return result


@dataclass
class Character:
    character_id: Optional[str] = None
    activity_exp: Optional[int] = None
    activity_stamina: Optional[int] = None
    light_fan_amount: Optional[int] = None
    middle_fan_amount: Optional[int] = None
    heavy_fan_amount: Optional[int] = None
    favorite_costume_id: Optional[str] = None
    stamina_updated_time: Optional[int] = None
    in_activity: Optional[bool] = None
    reliability: Optional[int] = None
    live_highest_score: Optional[int] = None
    character_only_photo_amount: Optional[int] = None
    live_costume_id: Optional[str] = None
    activity_level: Optional[int] = None
    audience_candidate_amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Character':
        assert isinstance(obj, dict)
        character_id = from_union(
            [from_str, from_none], obj.get("characterId"))
        activity_exp = from_union(
            [from_int, from_none], obj.get("activityExp"))
        activity_stamina = from_union(
            [from_int, from_none], obj.get("activityStamina"))
        light_fan_amount = from_union(
            [from_int, from_none], obj.get("lightFanAmount"))
        middle_fan_amount = from_union(
            [from_int, from_none], obj.get("middleFanAmount"))
        heavy_fan_amount = from_union(
            [from_int, from_none], obj.get("heavyFanAmount"))
        favorite_costume_id = from_union(
            [from_str, from_none], obj.get("favoriteCostumeId"))
        stamina_updated_time = from_union(
            [from_int, from_none], obj.get("staminaUpdatedTime"))
        in_activity = from_union([from_bool, from_none], obj.get("inActivity"))
        reliability = from_union([from_int, from_none], obj.get("reliability"))
        live_highest_score = from_union(
            [from_int, from_none], obj.get("liveHighestScore"))
        character_only_photo_amount = from_union(
            [from_int, from_none], obj.get("characterOnlyPhotoAmount"))
        live_costume_id = from_union(
            [from_str, from_none], obj.get("liveCostumeId"))
        activity_level = from_union(
            [from_int, from_none], obj.get("activityLevel"))
        audience_candidate_amount = from_union(
            [from_int, from_none], obj.get("audienceCandidateAmount"))
        return Character(character_id, activity_exp, activity_stamina, light_fan_amount, middle_fan_amount, heavy_fan_amount, favorite_costume_id, stamina_updated_time, in_activity, reliability, live_highest_score, character_only_photo_amount, live_costume_id, activity_level, audience_candidate_amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["characterId"] = from_union(
            [from_str, from_none], self.character_id)
        result["activityExp"] = from_union(
            [from_int, from_none], self.activity_exp)
        result["activityStamina"] = from_union(
            [from_int, from_none], self.activity_stamina)
        result["lightFanAmount"] = from_union(
            [from_int, from_none], self.light_fan_amount)
        result["middleFanAmount"] = from_union(
            [from_int, from_none], self.middle_fan_amount)
        result["heavyFanAmount"] = from_union(
            [from_int, from_none], self.heavy_fan_amount)
        result["favoriteCostumeId"] = from_union(
            [from_str, from_none], self.favorite_costume_id)
        result["staminaUpdatedTime"] = from_union(
            [from_int, from_none], self.stamina_updated_time)
        result["inActivity"] = from_union(
            [from_bool, from_none], self.in_activity)
        result["reliability"] = from_union(
            [from_int, from_none], self.reliability)
        result["liveHighestScore"] = from_union(
            [from_int, from_none], self.live_highest_score)
        result["characterOnlyPhotoAmount"] = from_union(
            [from_int, from_none], self.character_only_photo_amount)
        result["liveCostumeId"] = from_union(
            [from_str, from_none], self.live_costume_id)
        result["activityLevel"] = from_union(
            [from_int, from_none], self.activity_level)
        result["audienceCandidateAmount"] = from_union(
            [from_int, from_none], self.audience_candidate_amount)
        return result


@dataclass
class Item:
    item_id: Optional[str] = None
    expired_time: Optional[int] = None
    amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Item':
        assert isinstance(obj, dict)
        item_id = from_union([from_str, from_none], obj.get("itemId"))
        expired_time = from_union(
            [from_int, from_none], obj.get("expiredTime"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        return Item(item_id, expired_time, amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["itemId"] = from_union([from_str, from_none], self.item_id)
        result["expiredTime"] = from_union(
            [from_int, from_none], self.expired_time)
        result["amount"] = from_union([from_int, from_none], self.amount)
        return result


@dataclass
class Mission:
    mission_id: Optional[str] = None
    current_threshold: Optional[int] = None
    progress: Optional[int] = None
    status_type: Optional[int] = None
    last_update_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Mission':
        assert isinstance(obj, dict)
        mission_id = from_union([from_str, from_none], obj.get("missionId"))
        current_threshold = from_union(
            [from_int, from_none], obj.get("currentThreshold"))
        progress = from_union([from_int, from_none], obj.get("progress"))
        status_type = from_union([from_int, from_none], obj.get("statusType"))
        last_update_time = from_union(
            [from_int, from_none], obj.get("lastUpdateTime"))
        return Mission(mission_id, current_threshold, progress, status_type, last_update_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["missionId"] = from_union(
            [from_str, from_none], self.mission_id)
        result["currentThreshold"] = from_union(
            [from_int, from_none], self.current_threshold)
        result["progress"] = from_union([from_int, from_none], self.progress)
        result["statusType"] = from_union(
            [from_int, from_none], self.status_type)
        result["lastUpdateTime"] = from_union(
            [from_int, from_none], self.last_update_time)
        return result


@dataclass
class Point:
    point_type: Optional[int] = None
    amount: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Point':
        assert isinstance(obj, dict)
        point_type = from_union([from_int, from_none], obj.get("pointType"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        return Point(point_type, amount)

    def to_dict(self) -> dict:
        result: dict = {}
        result["pointType"] = from_union(
            [from_int, from_none], self.point_type)
        result["amount"] = from_union([from_int, from_none], self.amount)
        return result


@dataclass
class Quest:
    quest_id: Optional[str] = None
    daily_clear_count: Optional[int] = None
    last_cleared_time: Optional[int] = None
    highest_score: Optional[int] = None
    highest_score_time: Optional[int] = None
    highest_rank: Optional[int] = None
    current_ranking_highest_score: Optional[int] = None
    current_ranking_highest_score_time: Optional[int] = None
    current_ranking_highest_rank: Optional[int] = None
    highest_score_rank: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Quest':
        assert isinstance(obj, dict)
        quest_id = from_union([from_str, from_none], obj.get("questId"))
        daily_clear_count = from_union(
            [from_int, from_none], obj.get("dailyClearCount"))
        last_cleared_time = from_union(
            [from_int, from_none], obj.get("lastClearedTime"))
        highest_score = from_union(
            [from_int, from_none], obj.get("highestScore"))
        highest_score_time = from_union(
            [from_int, from_none], obj.get("highestScoreTime"))
        highest_rank = from_union(
            [from_int, from_none], obj.get("highestRank"))
        current_ranking_highest_score = from_union(
            [from_int, from_none], obj.get("currentRankingHighestScore"))
        current_ranking_highest_score_time = from_union(
            [from_int, from_none], obj.get("currentRankingHighestScoreTime"))
        current_ranking_highest_rank = from_union(
            [from_int, from_none], obj.get("currentRankingHighestRank"))
        highest_score_rank = from_union(
            [from_int, from_none], obj.get("highestScoreRank"))
        return Quest(quest_id, daily_clear_count, last_cleared_time, highest_score, highest_score_time, highest_rank, current_ranking_highest_score, current_ranking_highest_score_time, current_ranking_highest_rank, highest_score_rank)

    def to_dict(self) -> dict:
        result: dict = {}
        result["questId"] = from_union([from_str, from_none], self.quest_id)
        result["dailyClearCount"] = from_union(
            [from_int, from_none], self.daily_clear_count)
        result["lastClearedTime"] = from_union(
            [from_int, from_none], self.last_cleared_time)
        result["highestScore"] = from_union(
            [from_int, from_none], self.highest_score)
        result["highestScoreTime"] = from_union(
            [from_int, from_none], self.highest_score_time)
        result["highestRank"] = from_union(
            [from_int, from_none], self.highest_rank)
        result["currentRankingHighestScore"] = from_union(
            [from_int, from_none], self.current_ranking_highest_score)
        result["currentRankingHighestScoreTime"] = from_union(
            [from_int, from_none], self.current_ranking_highest_score_time)
        result["currentRankingHighestRank"] = from_union(
            [from_int, from_none], self.current_ranking_highest_rank)
        result["highestScoreRank"] = from_union(
            [from_int, from_none], self.highest_score_rank)
        return result


@dataclass
class UpdatedData:
    user: None
    cards: None
    costumes: None
    accessories: None
    photos: None
    decks: None
    deck_positions: None
    stories: None
    staffs: None
    messages: None
    telephones: None
    profile: None
    emblems: None
    balance: None
    gacha_buttons: None
    home_talks: None
    photo_report: None
    card_supports: None
    message_schedules: None
    notifications: None
    hierarchy: None
    tutorials: None
    home_positions: None
    musics: None
    decorations: None
    items: Optional[List[Item]] = None
    characters: Optional[List[Character]] = None
    points: Optional[List[Point]] = None
    missions: Optional[List[Mission]] = None
    character_musics: Optional[List[CharacterMusic]] = None
    total_count: Optional[Dict[str, int]] = None
    areas: Optional[List[Area]] = None
    quests: Optional[List[Quest]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UpdatedData':
        assert isinstance(obj, dict)
        user = from_none(obj.get("user"))
        cards = from_none(obj.get("cards"))
        costumes = from_none(obj.get("costumes"))
        accessories = from_none(obj.get("accessories"))
        photos = from_none(obj.get("photos"))
        decks = from_none(obj.get("decks"))
        deck_positions = from_none(obj.get("deckPositions"))
        stories = from_none(obj.get("stories"))
        staffs = from_none(obj.get("staffs"))
        messages = from_none(obj.get("messages"))
        telephones = from_none(obj.get("telephones"))
        profile = from_none(obj.get("profile"))
        emblems = from_none(obj.get("emblems"))
        balance = from_none(obj.get("balance"))
        gacha_buttons = from_none(obj.get("gachaButtons"))
        home_talks = from_none(obj.get("homeTalks"))
        photo_report = from_none(obj.get("photoReport"))
        card_supports = from_none(obj.get("cardSupports"))
        message_schedules = from_none(obj.get("messageSchedules"))
        notifications = from_none(obj.get("notifications"))
        hierarchy = from_none(obj.get("hierarchy"))
        tutorials = from_none(obj.get("tutorials"))
        home_positions = from_none(obj.get("homePositions"))
        musics = from_none(obj.get("musics"))
        decorations = from_none(obj.get("decorations"))
        items = from_union([lambda x: from_list(
            Item.from_dict, x), from_none], obj.get("items"))
        characters = from_union([lambda x: from_list(
            Character.from_dict, x), from_none], obj.get("characters"))
        points = from_union([lambda x: from_list(
            Point.from_dict, x), from_none], obj.get("points"))
        missions = from_union([lambda x: from_list(
            Mission.from_dict, x), from_none], obj.get("missions"))
        character_musics = from_union([lambda x: from_list(
            CharacterMusic.from_dict, x), from_none], obj.get("characterMusics"))
        total_count = from_union([lambda x: from_dict(
            from_int, x), from_none], obj.get("totalCount"))
        areas = from_union([lambda x: from_list(
            Area.from_dict, x), from_none], obj.get("areas"))
        quests = from_union([lambda x: from_list(
            Quest.from_dict, x), from_none], obj.get("quests"))
        return UpdatedData(user, cards, costumes, accessories, photos, decks, deck_positions, stories, staffs, messages, telephones, profile, emblems, balance, gacha_buttons, home_talks, photo_report, card_supports, message_schedules, notifications, hierarchy, tutorials, home_positions, musics, decorations, items, characters, points, missions, character_musics, total_count, areas, quests)

    def to_dict(self) -> dict:
        result: dict = {}
        result["user"] = from_none(self.user)
        result["cards"] = from_none(self.cards)
        result["costumes"] = from_none(self.costumes)
        result["accessories"] = from_none(self.accessories)
        result["photos"] = from_none(self.photos)
        result["decks"] = from_none(self.decks)
        result["deckPositions"] = from_none(self.deck_positions)
        result["stories"] = from_none(self.stories)
        result["staffs"] = from_none(self.staffs)
        result["messages"] = from_none(self.messages)
        result["telephones"] = from_none(self.telephones)
        result["profile"] = from_none(self.profile)
        result["emblems"] = from_none(self.emblems)
        result["balance"] = from_none(self.balance)
        result["gachaButtons"] = from_none(self.gacha_buttons)
        result["homeTalks"] = from_none(self.home_talks)
        result["photoReport"] = from_none(self.photo_report)
        result["cardSupports"] = from_none(self.card_supports)
        result["messageSchedules"] = from_none(self.message_schedules)
        result["notifications"] = from_none(self.notifications)
        result["hierarchy"] = from_none(self.hierarchy)
        result["tutorials"] = from_none(self.tutorials)
        result["homePositions"] = from_none(self.home_positions)
        result["musics"] = from_none(self.musics)
        result["decorations"] = from_none(self.decorations)
        result["items"] = from_union([lambda x: from_list(
            lambda x: to_class(Item, x), x), from_none], self.items)
        result["characters"] = from_union([lambda x: from_list(
            lambda x: to_class(Character, x), x), from_none], self.characters)
        result["points"] = from_union([lambda x: from_list(
            lambda x: to_class(Point, x), x), from_none], self.points)
        result["missions"] = from_union([lambda x: from_list(
            lambda x: to_class(Mission, x), x), from_none], self.missions)
        result["characterMusics"] = from_union([lambda x: from_list(
            lambda x: to_class(CharacterMusic, x), x), from_none], self.character_musics)
        result["totalCount"] = from_union(
            [lambda x: from_dict(from_int, x), from_none], self.total_count)
        result["areas"] = from_union([lambda x: from_list(
            lambda x: to_class(Area, x), x), from_none], self.areas)
        result["quests"] = from_union([lambda x: from_list(
            lambda x: to_class(Quest, x), x), from_none], self.quests)
        return result


@dataclass
class CommonResponse:
    updated_data: Optional[UpdatedData] = None
    deleted_data: Optional[DeletedData] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CommonResponse':
        assert isinstance(obj, dict)
        updated_data = from_union(
            [UpdatedData.from_dict, from_none], obj.get("updatedData"))
        deleted_data = from_union(
            [DeletedData.from_dict, from_none], obj.get("deletedData"))
        return CommonResponse(updated_data, deleted_data)

    def to_dict(self) -> dict:
        result: dict = {}
        result["updatedData"] = from_union(
            [lambda x: to_class(UpdatedData, x), from_none], self.updated_data)
        result["deletedData"] = from_union(
            [lambda x: to_class(DeletedData, x), from_none], self.deleted_data)
        return result


@dataclass
class RankPattern:
    rank_type: Optional[int] = None
    plus: Optional[int] = None
    threshold_score: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'RankPattern':
        assert isinstance(obj, dict)
        rank_type = from_union([from_int, from_none], obj.get("rankType"))
        plus = from_union([from_int, from_none], obj.get("plus"))
        threshold_score = from_union(
            [from_int, from_none], obj.get("thresholdScore"))
        return RankPattern(rank_type, plus, threshold_score)

    def to_dict(self) -> dict:
        result: dict = {}
        result["rankType"] = from_union([from_int, from_none], self.rank_type)
        result["plus"] = from_union([from_int, from_none], self.plus)
        result["thresholdScore"] = from_union(
            [from_int, from_none], self.threshold_score)
        return result


@dataclass
class Detail:
    """ActivatedSkill Detail"""
    efficacy_index: Optional[int] = None
    value: Optional[int] = None
    status_type: Optional[int] = None
    target_card_indexes: Optional[List[int]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Detail':
        assert isinstance(obj, dict)
        efficacy_index = from_union(
            [from_int, from_none], obj.get("efficacyIndex"))
        value = from_union([from_int, from_none], obj.get("value"))
        status_type = from_union([from_int, from_none], obj.get("statusType"))
        target_card_indexes = from_union(
            [from_none, lambda x: from_list(from_int, x)], obj.get("targetCardIndexes"))
        return Detail(efficacy_index, value, status_type, target_card_indexes)

    def to_dict(self) -> dict:
        result: dict = {}
        result["efficacyIndex"] = from_union(
            [from_int, from_none], self.efficacy_index)
        result["value"] = from_union([from_int, from_none], self.value)
        result["statusType"] = from_union(
            [from_int, from_none], self.status_type)
        result["targetCardIndexes"] = from_union(
            [from_none, lambda x: from_list(from_int, x)], self.target_card_indexes)
        return result


@dataclass
class ActivatedSkill:
    failures: None
    descriptions: None
    order: Optional[int] = None
    card_index: Optional[int] = None
    skill_index: Optional[int] = None
    activated: Optional[bool] = None
    stamina: Optional[int] = None
    score: Optional[int] = None
    is_critical: Optional[bool] = None
    details: Optional[List[Detail]] = None
    is_combo_break: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'ActivatedSkill':
        assert isinstance(obj, dict)
        failures = from_none(obj.get("failures"))
        descriptions = from_none(obj.get("descriptions"))
        order = from_union([from_int, from_none], obj.get("order"))
        card_index = from_union([from_int, from_none], obj.get("cardIndex"))
        skill_index = from_union([from_int, from_none], obj.get("skillIndex"))
        activated = from_union([from_bool, from_none], obj.get("activated"))
        stamina = from_union([from_int, from_none], obj.get("stamina"))
        score = from_union([from_int, from_none], obj.get("score"))
        is_critical = from_union([from_bool, from_none], obj.get("isCritical"))
        details = from_union([lambda x: from_list(
            Detail.from_dict, x), from_none], obj.get("details"))
        is_combo_break = from_union(
            [from_bool, from_none], obj.get("isComboBreak"))
        return ActivatedSkill(failures, descriptions, order, card_index, skill_index, activated, stamina, score, is_critical, details, is_combo_break)

    def to_dict(self) -> dict:
        result: dict = {}
        result["failures"] = from_none(self.failures)
        result["descriptions"] = from_none(self.descriptions)
        result["order"] = from_union([from_int, from_none], self.order)
        result["cardIndex"] = from_union(
            [from_int, from_none], self.card_index)
        result["skillIndex"] = from_union(
            [from_int, from_none], self.skill_index)
        result["activated"] = from_union(
            [from_bool, from_none], self.activated)
        result["stamina"] = from_union([from_int, from_none], self.stamina)
        result["score"] = from_union([from_int, from_none], self.score)
        result["isCritical"] = from_union(
            [from_bool, from_none], self.is_critical)
        result["details"] = from_union([lambda x: from_list(
            lambda x: to_class(Detail, x), x), from_none], self.details)
        result["isComboBreak"] = from_union(
            [from_bool, from_none], self.is_combo_break)
        return result


@dataclass
class Beat:
    order: Optional[int] = None
    card_index: Optional[int] = None
    score: Optional[int] = None
    is_critical: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Beat':
        assert isinstance(obj, dict)
        order = from_union([from_int, from_none], obj.get("order"))
        card_index = from_union([from_int, from_none], obj.get("cardIndex"))
        score = from_union([from_int, from_none], obj.get("score"))
        is_critical = from_union([from_bool, from_none], obj.get("isCritical"))
        return Beat(order, card_index, score, is_critical)

    def to_dict(self) -> dict:
        result: dict = {}
        result["order"] = from_union([from_int, from_none], self.order)
        result["cardIndex"] = from_union(
            [from_int, from_none], self.card_index)
        result["score"] = from_union([from_int, from_none], self.score)
        result["isCritical"] = from_union(
            [from_bool, from_none], self.is_critical)
        return result


@dataclass
class Effect:
    status_type: Optional[int] = None
    skill_efficacy_type: Optional[int] = None
    value: Optional[int] = None
    grade: Optional[int] = None
    remain_effected_chart_count: Optional[int] = None
    max_grade: Optional[int] = None
    value2: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Effect':
        assert isinstance(obj, dict)
        status_type = from_union([from_int, from_none], obj.get("statusType"))
        skill_efficacy_type = from_union(
            [from_int, from_none], obj.get("skillEfficacyType"))
        value = from_union([from_int, from_none], obj.get("value"))
        grade = from_union([from_int, from_none], obj.get("grade"))
        remain_effected_chart_count = from_union(
            [from_int, from_none], obj.get("remainEffectedChartCount"))
        max_grade = from_union([from_int, from_none], obj.get("maxGrade"))
        value2 = from_union([from_int, from_none], obj.get("value2"))
        return Effect(status_type, skill_efficacy_type, value, grade, remain_effected_chart_count, max_grade, value2)

    def to_dict(self) -> dict:
        result: dict = {}
        result["statusType"] = from_union(
            [from_int, from_none], self.status_type)
        result["skillEfficacyType"] = from_union(
            [from_int, from_none], self.skill_efficacy_type)
        result["value"] = from_union([from_int, from_none], self.value)
        result["grade"] = from_union([from_int, from_none], self.grade)
        result["remainEffectedChartCount"] = from_union(
            [from_int, from_none], self.remain_effected_chart_count)
        result["maxGrade"] = from_union([from_int, from_none], self.max_grade)
        result["value2"] = from_union([from_int, from_none], self.value2)
        return result


@dataclass
class SkillStatus:
    skill_index: Optional[int] = None
    remain_count: Optional[int] = None
    cool_time: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'SkillStatus':
        assert isinstance(obj, dict)
        skill_index = from_union([from_int, from_none], obj.get("skillIndex"))
        remain_count = from_union(
            [from_int, from_none], obj.get("remainCount"))
        cool_time = from_union([from_int, from_none], obj.get("coolTime"))
        return SkillStatus(skill_index, remain_count, cool_time)

    def to_dict(self) -> dict:
        result: dict = {}
        result["skillIndex"] = from_union(
            [from_int, from_none], self.skill_index)
        result["remainCount"] = from_union(
            [from_int, from_none], self.remain_count)
        result["coolTime"] = from_union([from_int, from_none], self.cool_time)
        return result


@dataclass
class CardStatus:
    card_index: Optional[int] = None
    stamina: Optional[int] = None
    dance: Optional[int] = None
    vocal: Optional[int] = None
    visual: Optional[int] = None
    effects: Optional[List[Effect]] = None
    skill_statuses: Optional[List[SkillStatus]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CardStatus':
        assert isinstance(obj, dict)
        card_index = from_union([from_int, from_none], obj.get("cardIndex"))
        stamina = from_union([from_int, from_none], obj.get("stamina"))
        dance = from_union([from_int, from_none], obj.get("dance"))
        vocal = from_union([from_int, from_none], obj.get("vocal"))
        visual = from_union([from_int, from_none], obj.get("visual"))
        effects = from_union([lambda x: from_list(
            Effect.from_dict, x), from_none], obj.get("effects"))
        skill_statuses = from_union([lambda x: from_list(
            SkillStatus.from_dict, x), from_none], obj.get("skillStatuses"))
        return CardStatus(card_index, stamina, dance, vocal, visual, effects, skill_statuses)

    def to_dict(self) -> dict:
        result: dict = {}
        result["cardIndex"] = from_union(
            [from_int, from_none], self.card_index)
        result["stamina"] = from_union([from_int, from_none], self.stamina)
        result["dance"] = from_union([from_int, from_none], self.dance)
        result["vocal"] = from_union([from_int, from_none], self.vocal)
        result["visual"] = from_union([from_int, from_none], self.visual)
        result["effects"] = from_union([lambda x: from_list(
            lambda x: to_class(Effect, x), x), from_none], self.effects)
        result["skillStatuses"] = from_union([lambda x: from_list(
            lambda x: to_class(SkillStatus, x), x), from_none], self.skill_statuses)
        return result


@dataclass
class UserStatus:
    user_index: Optional[int] = None
    current_combo_count: Optional[int] = None
    total_score: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserStatus':
        assert isinstance(obj, dict)
        user_index = from_union([from_int, from_none], obj.get("userIndex"))
        current_combo_count = from_union(
            [from_int, from_none], obj.get("currentComboCount"))
        total_score = from_union([from_int, from_none], obj.get("totalScore"))
        return UserStatus(user_index, current_combo_count, total_score)

    def to_dict(self) -> dict:
        result: dict = {}
        result["userIndex"] = from_union(
            [from_int, from_none], self.user_index)
        result["currentComboCount"] = from_union(
            [from_int, from_none], self.current_combo_count)
        result["totalScore"] = from_union(
            [from_int, from_none], self.total_score)
        return result


@dataclass
class Chart:
    number: Optional[int] = None
    chart_type: Optional[int] = None
    attribute_type: Optional[int] = None
    beats: Optional[List[Beat]] = None
    activated_skill: Optional[ActivatedSkill] = None
    activated_passive_skills: Optional[List[ActivatedSkill]] = None
    user_statuses: Optional[List[UserStatus]] = None
    card_statuses: Optional[List[CardStatus]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Chart':
        assert isinstance(obj, dict)
        number = from_union([from_int, from_none], obj.get("number"))
        chart_type = from_union([from_int, from_none], obj.get("chartType"))
        attribute_type = from_union(
            [from_int, from_none], obj.get("attributeType"))
        beats = from_union([lambda x: from_list(
            Beat.from_dict, x), from_none], obj.get("beats"))
        activated_skill = from_union(
            [from_none, ActivatedSkill.from_dict], obj.get("activatedSkill"))
        activated_passive_skills = from_union([lambda x: from_list(
            ActivatedSkill.from_dict, x), from_none], obj.get("activatedPassiveSkills"))
        user_statuses = from_union([lambda x: from_list(
            UserStatus.from_dict, x), from_none], obj.get("userStatuses"))
        card_statuses = from_union([lambda x: from_list(
            CardStatus.from_dict, x), from_none], obj.get("cardStatuses"))
        return Chart(number, chart_type, attribute_type, beats, activated_skill, activated_passive_skills, user_statuses, card_statuses)

    def to_dict(self) -> dict:
        result: dict = {}
        result["number"] = from_union([from_int, from_none], self.number)
        result["chartType"] = from_union(
            [from_int, from_none], self.chart_type)
        result["attributeType"] = from_union(
            [from_int, from_none], self.attribute_type)
        result["beats"] = from_union([lambda x: from_list(
            lambda x: to_class(Beat, x), x), from_none], self.beats)
        result["activatedSkill"] = from_union(
            [from_none, lambda x: to_class(ActivatedSkill, x)], self.activated_skill)
        result["activatedPassiveSkills"] = from_union([lambda x: from_list(
            lambda x: to_class(ActivatedSkill, x), x), from_none], self.activated_passive_skills)
        result["userStatuses"] = from_union([lambda x: from_list(
            lambda x: to_class(UserStatus, x), x), from_none], self.user_statuses)
        result["cardStatuses"] = from_union([lambda x: from_list(
            lambda x: to_class(CardStatus, x), x), from_none], self.card_statuses)
        return result


@dataclass
class Skill:
    index: Optional[int] = None
    skill_id: Optional[str] = None
    skill_level: Optional[int] = None
    possession_type: Optional[int] = None



    @staticmethod
    def from_dict(obj: Any) -> 'Skill':
        assert isinstance(obj, dict)
        index = from_union([from_int, from_none], obj.get("index"))
        skill_id = from_union([from_str, from_none], obj.get("skillId"))
        skill_level = from_union([from_int, from_none], obj.get("skillLevel"))
        possession_type = from_union(
            [from_int, from_none], obj.get("possessionType"))
        return Skill(index, skill_id, skill_level, possession_type)

    def to_dict(self) -> dict:
        result: dict = {}
        result["index"] = from_union([from_int, from_none], self.index)
        result["skillId"] = from_union([from_str, from_none], self.skill_id)
        result["skillLevel"] = from_union(
            [from_int, from_none], self.skill_level)
        result["possessionType"] = from_union(
            [from_int, from_none], self.possession_type)
        return result


@dataclass
class Card:
    index: Optional[int] = None
    card_id: Optional[str] = None
    display_character_id: Optional[str] = None
    display_costume_id: Optional[str] = None
    level: Optional[int] = None
    rarity: Optional[int] = None
    vocal: Optional[int] = None
    dance: Optional[int] = None
    visual: Optional[int] = None
    stamina: Optional[int] = None
    start_stamina: Optional[int] = None
    mental: Optional[int] = None
    technique: Optional[int] = None
    skill_level1: Optional[int] = None
    skill_level2: Optional[int] = None
    skill_level3: Optional[int] = None
    audience_amount: Optional[int] = None
    skills: Optional[List[Skill]] = None
    skills_ob: Optional[List[SkillOb]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Card':
        assert isinstance(obj, dict)
        index = from_union([from_int, from_none], obj.get("index"))
        card_id = from_union([from_str, from_none], obj.get("cardId"))
        display_character_id = from_union(
            [from_str, from_none], obj.get("displayCharacterId"))
        display_costume_id = from_union(
            [from_str, from_none], obj.get("displayCostumeId"))
        level = from_union([from_int, from_none], obj.get("level"))
        rarity = from_union([from_int, from_none], obj.get("rarity"))
        vocal = from_union([from_int, from_none], obj.get("vocal"))
        dance = from_union([from_int, from_none], obj.get("dance"))
        visual = from_union([from_int, from_none], obj.get("visual"))
        stamina = from_union([from_int, from_none], obj.get("stamina"))
        start_stamina = from_union(
            [from_int, from_none], obj.get("startStamina"))
        mental = from_union([from_int, from_none], obj.get("mental"))
        technique = from_union([from_int, from_none], obj.get("technique"))
        skill_level1 = from_union(
            [from_int, from_none], obj.get("skillLevel1"))
        skill_level2 = from_union(
            [from_int, from_none], obj.get("skillLevel2"))
        skill_level3 = from_union(
            [from_int, from_none], obj.get("skillLevel3"))
        audience_amount = from_union(
            [from_int, from_none], obj.get("audienceAmount"))
        skills = from_union([lambda x: from_list(
            Skill.from_dict, x), from_none], obj.get("skills"))
        return Card(index, card_id, display_character_id, display_costume_id, level, rarity, vocal, dance, visual, stamina, start_stamina, mental, technique, skill_level1, skill_level2, skill_level3, audience_amount, skills)

    def to_dict(self) -> dict:
        result: dict = {}
        result["index"] = from_union([from_int, from_none], self.index)
        result["cardId"] = from_union([from_str, from_none], self.card_id)
        result["displayCharacterId"] = from_union(
            [from_str, from_none], self.display_character_id)
        result["displayCostumeId"] = from_union(
            [from_str, from_none], self.display_costume_id)
        result["level"] = from_union([from_int, from_none], self.level)
        result["rarity"] = from_union([from_int, from_none], self.rarity)
        result["vocal"] = from_union([from_int, from_none], self.vocal)
        result["dance"] = from_union([from_int, from_none], self.dance)
        result["visual"] = from_union([from_int, from_none], self.visual)
        result["stamina"] = from_union([from_int, from_none], self.stamina)
        result["startStamina"] = from_union(
            [from_int, from_none], self.start_stamina)
        result["mental"] = from_union([from_int, from_none], self.mental)
        result["technique"] = from_union([from_int, from_none], self.technique)
        result["skillLevel1"] = from_union(
            [from_int, from_none], self.skill_level1)
        result["skillLevel2"] = from_union(
            [from_int, from_none], self.skill_level2)
        result["skillLevel3"] = from_union(
            [from_int, from_none], self.skill_level3)
        result["audienceAmount"] = from_union(
            [from_int, from_none], self.audience_amount)
        result["skills"] = from_union([lambda x: from_list(
            lambda x: to_class(Skill, x), x), from_none], self.skills)
        return result


@dataclass
class UserDeck:
    bonus_skills: None
    deck_name: Optional[str] = None
    cards: Optional[List[Card]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserDeck':
        assert isinstance(obj, dict)
        bonus_skills = from_none(obj.get("bonusSkills"))
        deck_name = from_union([from_str, from_none], obj.get("deckName"))
        cards = from_union([lambda x: from_list(
            Card.from_dict, x), from_none], obj.get("cards"))
        return UserDeck(bonus_skills, deck_name, cards)

    def to_dict(self) -> dict:
        result: dict = {}
        result["bonusSkills"] = from_none(self.bonus_skills)
        result["deckName"] = from_union([from_str, from_none], self.deck_name)
        result["cards"] = from_union([lambda x: from_list(
            lambda x: to_class(Card, x), x), from_none], self.cards)
        return result


@dataclass
class CardResult:
    card_id: Optional[str] = None
    total_score: Optional[int] = None

    @staticmethod
    def from_dict(obj: Any) -> 'CardResult':
        assert isinstance(obj, dict)
        card_id = from_union([from_str, from_none], obj.get("cardId"))
        total_score = from_union([from_int, from_none], obj.get("totalScore"))
        return CardResult(card_id, total_score)

    def to_dict(self) -> dict:
        result: dict = {}
        result["cardId"] = from_union([from_str, from_none], self.card_id)
        result["totalScore"] = from_union(
            [from_int, from_none], self.total_score)
        return result


@dataclass
class UserResult:
    score: Optional[int] = None
    critical_count: Optional[int] = None
    hit_count: Optional[int] = None
    miss_count: Optional[int] = None
    max_combo_count: Optional[int] = None
    card_results: Optional[List[CardResult]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserResult':
        assert isinstance(obj, dict)
        score = from_union([from_int, from_none], obj.get("score"))
        critical_count = from_union(
            [from_int, from_none], obj.get("criticalCount"))
        hit_count = from_union([from_int, from_none], obj.get("hitCount"))
        miss_count = from_union([from_int, from_none], obj.get("missCount"))
        max_combo_count = from_union(
            [from_int, from_none], obj.get("maxComboCount"))
        card_results = from_union([lambda x: from_list(
            CardResult.from_dict, x), from_none], obj.get("cardResults"))
        return UserResult(score, critical_count, hit_count, miss_count, max_combo_count, card_results)

    def to_dict(self) -> dict:
        result: dict = {}
        result["score"] = from_union([from_int, from_none], self.score)
        result["criticalCount"] = from_union(
            [from_int, from_none], self.critical_count)
        result["hitCount"] = from_union([from_int, from_none], self.hit_count)
        result["missCount"] = from_union(
            [from_int, from_none], self.miss_count)
        result["maxComboCount"] = from_union(
            [from_int, from_none], self.max_combo_count)
        result["cardResults"] = from_union([lambda x: from_list(
            lambda x: to_class(CardResult, x), x), from_none], self.card_results)
        return result


@dataclass
class UserInfo:
    index: Optional[int] = None
    user_id: Optional[str] = None
    name: Optional[str] = None
    emblem_id: Optional[str] = None
    user_deck: Optional[UserDeck] = None
    user_result: Optional[UserResult] = None
    is_npc: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'UserInfo':
        assert isinstance(obj, dict)
        index = from_union([from_int, from_none], obj.get("index"))
        user_id = from_union([from_str, from_none], obj.get("userId"))
        name = from_union([from_str, from_none], obj.get("name"))
        emblem_id = from_union([from_str, from_none], obj.get("emblemId"))
        user_deck = from_union(
            [UserDeck.from_dict, from_none], obj.get("userDeck"))
        user_result = from_union(
            [UserResult.from_dict, from_none], obj.get("userResult"))
        is_npc = from_union([from_bool, from_none], obj.get("isNpc"))
        return UserInfo(index, user_id, name, emblem_id, user_deck, user_result, is_npc)

    def to_dict(self) -> dict:
        result: dict = {}
        result["index"] = from_union([from_int, from_none], self.index)
        result["userId"] = from_union([from_str, from_none], self.user_id)
        result["name"] = from_union([from_str, from_none], self.name)
        result["emblemId"] = from_union([from_str, from_none], self.emblem_id)
        result["userDeck"] = from_union(
            [lambda x: to_class(UserDeck, x), from_none], self.user_deck)
        result["userResult"] = from_union(
            [lambda x: to_class(UserResult, x), from_none], self.user_result)
        result["isNpc"] = from_union([from_bool, from_none], self.is_npc)
        return result


@dataclass
class Result:
    activated_passive_skills: None
    user_infos: Optional[List[UserInfo]] = None
    charts: Optional[List[Chart]] = None
    total_audience_amount: Optional[int] = None
    cleared: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Result':
        assert isinstance(obj, dict)
        activated_passive_skills = from_none(obj.get("activatedPassiveSkills"))
        user_infos = from_union([lambda x: from_list(
            UserInfo.from_dict, x), from_none], obj.get("userInfos"))
        charts = from_union([lambda x: from_list(
            Chart.from_dict, x), from_none], obj.get("charts"))
        total_audience_amount = from_union(
            [from_int, from_none], obj.get("totalAudienceAmount"))
        cleared = from_union([from_bool, from_none], obj.get("cleared"))
        return Result(activated_passive_skills, user_infos, charts, total_audience_amount, cleared)

    def to_dict(self) -> dict:
        result: dict = {}
        result["activatedPassiveSkills"] = from_none(
            self.activated_passive_skills)
        result["userInfos"] = from_union([lambda x: from_list(
            lambda x: to_class(UserInfo, x), x), from_none], self.user_infos)
        result["charts"] = from_union([lambda x: from_list(
            lambda x: to_class(Chart, x), x), from_none], self.charts)
        result["totalAudienceAmount"] = from_union(
            [from_int, from_none], self.total_audience_amount)
        result["cleared"] = from_union([from_bool, from_none], self.cleared)
        return result


@dataclass
class ClearRewardElement:
    duplicate_reward_results: None
    additional_gifts: None
    resource_type: Optional[int] = None
    resource_id: Optional[str] = None
    amount: Optional[int] = None
    before_amount: Optional[int] = None
    after_amount: Optional[int] = None
    is_new: Optional[bool] = None
    is_truncate: Optional[bool] = None
    is_gift: Optional[bool] = None

    @staticmethod
    def from_dict(obj: Any) -> 'ClearRewardElement':
        assert isinstance(obj, dict)
        duplicate_reward_results = from_none(obj.get("duplicateRewardResults"))
        additional_gifts = from_none(obj.get("additionalGifts"))
        resource_type = from_union(
            [from_int, from_none], obj.get("resourceType"))
        resource_id = from_union([from_none, from_str], obj.get("resourceId"))
        amount = from_union([from_int, from_none], obj.get("amount"))
        before_amount = from_union(
            [from_int, from_none], obj.get("beforeAmount"))
        after_amount = from_union(
            [from_int, from_none], obj.get("afterAmount"))
        is_new = from_union([from_bool, from_none], obj.get("isNew"))
        is_truncate = from_union([from_bool, from_none], obj.get("isTruncate"))
        is_gift = from_union([from_bool, from_none], obj.get("isGift"))
        return ClearRewardElement(duplicate_reward_results, additional_gifts, resource_type, resource_id, amount, before_amount, after_amount, is_new, is_truncate, is_gift)

    def to_dict(self) -> dict:
        result: dict = {}
        result["duplicateRewardResults"] = from_none(
            self.duplicate_reward_results)
        result["additionalGifts"] = from_none(self.additional_gifts)
        result["resourceType"] = from_union(
            [from_int, from_none], self.resource_type)
        result["resourceId"] = from_union(
            [from_none, from_str], self.resource_id)
        result["amount"] = from_union([from_int, from_none], self.amount)
        result["beforeAmount"] = from_union(
            [from_int, from_none], self.before_amount)
        result["afterAmount"] = from_union(
            [from_int, from_none], self.after_amount)
        result["isNew"] = from_union([from_bool, from_none], self.is_new)
        result["isTruncate"] = from_union(
            [from_bool, from_none], self.is_truncate)
        result["isGift"] = from_union([from_bool, from_none], self.is_gift)
        return result


@dataclass
class Reward:
    score_rank_additional_rewards: None
    music_mastery_rewards: None
    achieved_rank_rewards: None
    reward_cards: None
    campaign_drop_rewards: None
    clear_rewards: Optional[List[ClearRewardElement]] = None
    score_rank_rewards: Optional[List[ClearRewardElement]] = None

    @staticmethod
    def from_dict(obj: Any) -> 'Reward':
        assert isinstance(obj, dict)
        score_rank_additional_rewards = from_none(
            obj.get("scoreRankAdditionalRewards"))
        music_mastery_rewards = from_none(obj.get("musicMasteryRewards"))
        achieved_rank_rewards = from_none(obj.get("achievedRankRewards"))
        reward_cards = from_none(obj.get("rewardCards"))
        campaign_drop_rewards = from_none(obj.get("campaignDropRewards"))
        clear_rewards = from_union([lambda x: from_list(
            ClearRewardElement.from_dict, x), from_none], obj.get("clearRewards"))
        score_rank_rewards = from_union([lambda x: from_list(
            ClearRewardElement.from_dict, x), from_none], obj.get("scoreRankRewards"))
        return Reward(score_rank_additional_rewards, music_mastery_rewards, achieved_rank_rewards, reward_cards, campaign_drop_rewards, clear_rewards, score_rank_rewards)

    def to_dict(self) -> dict:
        result: dict = {}
        result["scoreRankAdditionalRewards"] = from_none(
            self.score_rank_additional_rewards)
        result["musicMasteryRewards"] = from_none(self.music_mastery_rewards)
        result["achievedRankRewards"] = from_none(self.achieved_rank_rewards)
        result["rewardCards"] = from_none(self.reward_cards)
        result["campaignDropRewards"] = from_none(self.campaign_drop_rewards)
        result["clearRewards"] = from_union([lambda x: from_list(
            lambda x: to_class(ClearRewardElement, x), x), from_none], self.clear_rewards)
        result["scoreRankRewards"] = from_union([lambda x: from_list(lambda x: to_class(
            ClearRewardElement, x), x), from_none], self.score_rank_rewards)
        return result


@dataclass
class LiveResult:
    hierarchy_change_info: None
    quest_id: Optional[str] = None
    result: Optional[Result] = None
    reward: Optional[Reward] = None
    rank_type: Optional[int] = None
    rank_plus: Optional[int] = None
    rank_patterns: Optional[List[RankPattern]] = None
    highest_rank: Optional[int] = None
    highest_score: Optional[int] = None
    common_response: Optional[CommonResponse] = None

    @staticmethod
    def from_dict(obj: Any) -> 'LiveResult':
        assert isinstance(obj, dict)
        hierarchy_change_info = from_none(obj.get("hierarchyChangeInfo"))
        quest_id = from_union([from_str, from_none], obj.get("questId"))
        result = from_union([Result.from_dict, from_none], obj.get("result"))
        reward = from_union([Reward.from_dict, from_none], obj.get("reward"))
        rank_type = from_union([from_int, from_none], obj.get("rankType"))
        rank_plus = from_union([from_int, from_none], obj.get("rankPlus"))
        rank_patterns = from_union([lambda x: from_list(
            RankPattern.from_dict, x), from_none], obj.get("rankPatterns"))
        highest_rank = from_union(
            [from_int, from_none], obj.get("highestRank"))
        highest_score = from_union(
            [from_int, from_none], obj.get("highestScore"))
        common_response = from_union(
            [CommonResponse.from_dict, from_none], obj.get("commonResponse"))
        return LiveResult(hierarchy_change_info, quest_id, result, reward, rank_type, rank_plus, rank_patterns, highest_rank, highest_score, common_response)

    def to_dict(self) -> dict:
        result: dict = {}
        result["hierarchyChangeInfo"] = from_none(self.hierarchy_change_info)
        result["questId"] = from_union([from_str, from_none], self.quest_id)
        result["result"] = from_union(
            [lambda x: to_class(Result, x), from_none], self.result)
        result["reward"] = from_union(
            [lambda x: to_class(Reward, x), from_none], self.reward)
        result["rankType"] = from_union([from_int, from_none], self.rank_type)
        result["rankPlus"] = from_union([from_int, from_none], self.rank_plus)
        result["rankPatterns"] = from_union([lambda x: from_list(
            lambda x: to_class(RankPattern, x), x), from_none], self.rank_patterns)
        result["highestRank"] = from_union(
            [from_int, from_none], self.highest_rank)
        result["highestScore"] = from_union(
            [from_int, from_none], self.highest_score)
        result["commonResponse"] = from_union(
            [lambda x: to_class(CommonResponse, x), from_none], self.common_response)
        return result


def live_result_from_dict(s: Any) -> LiveResult:
    return LiveResult.from_dict(s)


def live_result_to_dict(x: LiveResult) -> Any:
    return to_class(LiveResult, x)
